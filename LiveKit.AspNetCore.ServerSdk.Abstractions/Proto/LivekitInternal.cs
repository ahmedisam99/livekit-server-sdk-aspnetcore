// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: livekit_internal.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LiveKit.Proto {

  /// <summary>Holder for reflection information generated from livekit_internal.proto</summary>
  public static partial class LivekitInternalReflection {

    #region Descriptor
    /// <summary>File descriptor for livekit_internal.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LivekitInternalReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZsaXZla2l0X2ludGVybmFsLnByb3RvEgdsaXZla2l0GhRsaXZla2l0X21v",
            "ZGVscy5wcm90bxoUbGl2ZWtpdF9lZ3Jlc3MucHJvdG8aHGxpdmVraXRfYWdl",
            "bnRfZGlzcGF0Y2gucHJvdG8aEmxpdmVraXRfcm9vbS5wcm90bxoRbGl2ZWtp",
            "dF9ydGMucHJvdG8ipwEKBE5vZGUSCgoCaWQYASABKAkSCgoCaXAYAiABKAkS",
            "EAoIbnVtX2NwdXMYAyABKA0SIQoFc3RhdHMYBCABKAsyEi5saXZla2l0Lk5v",
            "ZGVTdGF0cxIfCgR0eXBlGAUgASgOMhEubGl2ZWtpdC5Ob2RlVHlwZRIhCgVz",
            "dGF0ZRgGIAEoDjISLmxpdmVraXQuTm9kZVN0YXRlEg4KBnJlZ2lvbhgHIAEo",
            "CSKRDAoJTm9kZVN0YXRzEhIKCnN0YXJ0ZWRfYXQYASABKAMSEgoKdXBkYXRl",
            "ZF9hdBgCIAEoAxIRCgludW1fcm9vbXMYAyABKAUSEwoLbnVtX2NsaWVudHMY",
            "BCABKAUSFQoNbnVtX3RyYWNrc19pbhgFIAEoBRIWCg5udW1fdHJhY2tzX291",
            "dBgGIAEoBRIiChpudW1fdHJhY2tfcHVibGlzaF9hdHRlbXB0cxgkIAEoBRIq",
            "Ch50cmFja19wdWJsaXNoX2F0dGVtcHRzX3Blcl9zZWMYJSABKAJCAhgBEiEK",
            "GW51bV90cmFja19wdWJsaXNoX3N1Y2Nlc3MYJiABKAUSKQoddHJhY2tfcHVi",
            "bGlzaF9zdWNjZXNzX3Blcl9zZWMYJyABKAJCAhgBEiQKHG51bV90cmFja19z",
            "dWJzY3JpYmVfYXR0ZW1wdHMYKCABKAUSLAogdHJhY2tfc3Vic2NyaWJlX2F0",
            "dGVtcHRzX3Blcl9zZWMYKSABKAJCAhgBEiMKG251bV90cmFja19zdWJzY3Jp",
            "YmVfc3VjY2VzcxgqIAEoBRIrCh90cmFja19zdWJzY3JpYmVfc3VjY2Vzc19w",
            "ZXJfc2VjGCsgASgCQgIYARIQCghieXRlc19pbhgHIAEoBBIRCglieXRlc19v",
            "dXQYCCABKAQSEgoKcGFja2V0c19pbhgJIAEoBBITCgtwYWNrZXRzX291dBgK",
            "IAEoBBISCgpuYWNrX3RvdGFsGAsgASgEEhwKEGJ5dGVzX2luX3Blcl9zZWMY",
            "DCABKAJCAhgBEh0KEWJ5dGVzX291dF9wZXJfc2VjGA0gASgCQgIYARIeChJw",
            "YWNrZXRzX2luX3Blcl9zZWMYDiABKAJCAhgBEh8KE3BhY2tldHNfb3V0X3Bl",
            "cl9zZWMYDyABKAJCAhgBEhgKDG5hY2tfcGVyX3NlYxgQIAEoAkICGAESEAoI",
            "bnVtX2NwdXMYESABKA0SGQoRbG9hZF9hdmdfbGFzdDFtaW4YEiABKAISGQoR",
            "bG9hZF9hdmdfbGFzdDVtaW4YEyABKAISGgoSbG9hZF9hdmdfbGFzdDE1bWlu",
            "GBQgASgCEhAKCGNwdV9sb2FkGBUgASgCEhcKC21lbW9yeV9sb2FkGCEgASgC",
            "QgIYARIUCgxtZW1vcnlfdG90YWwYIiABKAQSEwoLbWVtb3J5X3VzZWQYIyAB",
            "KAQSFwoPc3lzX3BhY2tldHNfb3V0GBwgASgNEhsKE3N5c19wYWNrZXRzX2Ry",
            "b3BwZWQYHSABKA0SIwoXc3lzX3BhY2tldHNfb3V0X3Blcl9zZWMYHiABKAJC",
            "AhgBEicKG3N5c19wYWNrZXRzX2Ryb3BwZWRfcGVyX3NlYxgfIAEoAkICGAES",
            "Kwofc3lzX3BhY2tldHNfZHJvcHBlZF9wY3RfcGVyX3NlYxggIAEoAkICGAES",
            "HAoUcmV0cmFuc21pdF9ieXRlc19vdXQYFiABKAQSHgoWcmV0cmFuc21pdF9w",
            "YWNrZXRzX291dBgXIAEoBBIoChxyZXRyYW5zbWl0X2J5dGVzX291dF9wZXJf",
            "c2VjGBggASgCQgIYARIqCh5yZXRyYW5zbWl0X3BhY2tldHNfb3V0X3Blcl9z",
            "ZWMYGSABKAJCAhgBEiQKHHBhcnRpY2lwYW50X3NpZ25hbF9jb25uZWN0ZWQY",
            "GiABKAQSMAokcGFydGljaXBhbnRfc2lnbmFsX2Nvbm5lY3RlZF9wZXJfc2Vj",
            "GBsgASgCQgIYARIhChlwYXJ0aWNpcGFudF9ydGNfY29ubmVjdGVkGCwgASgE",
            "Ei0KIXBhcnRpY2lwYW50X3J0Y19jb25uZWN0ZWRfcGVyX3NlYxgtIAEoAkIC",
            "GAESHAoUcGFydGljaXBhbnRfcnRjX2luaXQYLiABKAQSKAoccGFydGljaXBh",
            "bnRfcnRjX2luaXRfcGVyX3NlYxgvIAEoAkICGAESFwoPZm9yd2FyZF9sYXRl",
            "bmN5GDAgASgNEhYKDmZvcndhcmRfaml0dGVyGDEgASgNEiUKBXJhdGVzGDIg",
            "AygLMhYubGl2ZWtpdC5Ob2RlU3RhdHNSYXRlItgECg1Ob2RlU3RhdHNSYXRl",
            "EhIKCnN0YXJ0ZWRfYXQYASABKAMSEAoIZW5kZWRfYXQYAiABKAMSEAoIZHVy",
            "YXRpb24YAyABKAMSHgoWdHJhY2tfcHVibGlzaF9hdHRlbXB0cxgEIAEoAhId",
            "ChV0cmFja19wdWJsaXNoX3N1Y2Nlc3MYBSABKAISIAoYdHJhY2tfc3Vic2Ny",
            "aWJlX2F0dGVtcHRzGAYgASgCEh8KF3RyYWNrX3N1YnNjcmliZV9zdWNjZXNz",
            "GAcgASgCEhAKCGJ5dGVzX2luGAggASgCEhEKCWJ5dGVzX291dBgJIAEoAhIS",
            "CgpwYWNrZXRzX2luGAogASgCEhMKC3BhY2tldHNfb3V0GAsgASgCEhIKCm5h",
            "Y2tfdG90YWwYDCABKAISFwoPc3lzX3BhY2tldHNfb3V0GA0gASgCEhsKE3N5",
            "c19wYWNrZXRzX2Ryb3BwZWQYDiABKAISHAoUcmV0cmFuc21pdF9ieXRlc19v",
            "dXQYDyABKAISHgoWcmV0cmFuc21pdF9wYWNrZXRzX291dBgQIAEoAhIkChxw",
            "YXJ0aWNpcGFudF9zaWduYWxfY29ubmVjdGVkGBEgASgCEiEKGXBhcnRpY2lw",
            "YW50X3J0Y19jb25uZWN0ZWQYEiABKAISHAoUcGFydGljaXBhbnRfcnRjX2lu",
            "aXQYEyABKAISEAoIY3B1X2xvYWQYFCABKAISEwoLbWVtb3J5X2xvYWQYFSAB",
            "KAISEwoLbWVtb3J5X3VzZWQYFiABKAISFAoMbWVtb3J5X3RvdGFsGBcgASgC",
            "Io8FCgxTdGFydFNlc3Npb24SEQoJcm9vbV9uYW1lGAEgASgJEhAKCGlkZW50",
            "aXR5GAIgASgJEhUKDWNvbm5lY3Rpb25faWQYAyABKAkSEQoJcmVjb25uZWN0",
            "GAQgASgIEhYKDmF1dG9fc3Vic2NyaWJlGAkgASgIEhIKBmhpZGRlbhgKIAEo",
            "CEICGAESIwoGY2xpZW50GAsgASgLMhMubGl2ZWtpdC5DbGllbnRJbmZvEhQK",
            "CHJlY29yZGVyGAwgASgIQgIYARIMCgRuYW1lGA0gASgJEhMKC2dyYW50c19q",
            "c29uGA4gASgJEhcKD2FkYXB0aXZlX3N0cmVhbRgPIAEoCBIWCg5wYXJ0aWNp",
            "cGFudF9pZBgQIAEoCRIyChByZWNvbm5lY3RfcmVhc29uGBEgASgOMhgubGl2",
            "ZWtpdC5SZWNvbm5lY3RSZWFzb24SIwoWc3Vic2NyaWJlcl9hbGxvd19wYXVz",
            "ZRgSIAEoCEgAiAEBEhgKEGRpc2FibGVfaWNlX2xpdGUYEyABKAgSLwoLY3Jl",
            "YXRlX3Jvb20YFCABKAsyGi5saXZla2l0LkNyZWF0ZVJvb21SZXF1ZXN0EjQK",
            "EmFkZF90cmFja19yZXF1ZXN0cxgVIAMoCzIYLmxpdmVraXQuQWRkVHJhY2tS",
            "ZXF1ZXN0EjQKD3B1Ymxpc2hlcl9vZmZlchgWIAEoCzIbLmxpdmVraXQuU2Vz",
            "c2lvbkRlc2NyaXB0aW9uEiYKCnN5bmNfc3RhdGUYFyABKAsyEi5saXZla2l0",
            "LlN5bmNTdGF0ZRIiChp1c2Vfc2luZ2xlX3BlZXJfY29ubmVjdGlvbhgYIAEo",
            "CEIZChdfc3Vic2NyaWJlcl9hbGxvd19wYXVzZSKMAgoMUm9vbUludGVybmFs",
            "Ei4KDHRyYWNrX2VncmVzcxgBIAEoCzIYLmxpdmVraXQuQXV0b1RyYWNrRWdy",
            "ZXNzEjoKEnBhcnRpY2lwYW50X2VncmVzcxgCIAEoCzIeLmxpdmVraXQuQXV0",
            "b1BhcnRpY2lwYW50RWdyZXNzEiwKDXBsYXlvdXRfZGVsYXkYAyABKAsyFS5s",
            "aXZla2l0LlBsYXlvdXREZWxheRI0ChBhZ2VudF9kaXNwYXRjaGVzGAUgAygL",
            "MhoubGl2ZWtpdC5Sb29tQWdlbnREaXNwYXRjaBIUCgxzeW5jX3N0cmVhbXMY",
            "BCABKAgSFgoOcmVwbGF5X2VuYWJsZWQYBiABKAgifgoJSUNFQ29uZmlnEjgK",
            "FXByZWZlcmVuY2Vfc3Vic2NyaWJlchgBIAEoDjIZLmxpdmVraXQuSUNFQ2Fu",
            "ZGlkYXRlVHlwZRI3ChRwcmVmZXJlbmNlX3B1Ymxpc2hlchgCIAEoDjIZLmxp",
            "dmVraXQuSUNFQ2FuZGlkYXRlVHlwZSp2CghOb2RlVHlwZRIKCgZTRVJWRVIQ",
            "ABIOCgpDT05UUk9MTEVSEAESCQoFTUVESUEQAhIICgRUVVJOEAQSCwoHU1dF",
            "RVBFUhAFEgwKCERJUkVDVE9SEAYSEAoMSE9TVEVEX0FHRU5UEAcSDAoIU0VU",
            "VElOR1MQCCo8CglOb2RlU3RhdGUSDwoLU1RBUlRJTkdfVVAQABILCgdTRVJW",
            "SU5HEAESEQoNU0hVVFRJTkdfRE9XThACKjoKEElDRUNhbmRpZGF0ZVR5cGUS",
            "DAoISUNUX05PTkUQABILCgdJQ1RfVENQEAESCwoHSUNUX1RMUxACQkZaI2dp",
            "dGh1Yi5jb20vbGl2ZWtpdC9wcm90b2NvbC9saXZla2l0qgINTGl2ZUtpdC5Q",
            "cm90b+oCDkxpdmVLaXQ6OlByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::LiveKit.Proto.LivekitModelsReflection.Descriptor, global::LiveKit.Proto.LivekitEgressReflection.Descriptor, global::LiveKit.Proto.LivekitAgentDispatchReflection.Descriptor, global::LiveKit.Proto.LivekitRoomReflection.Descriptor, global::LiveKit.Proto.LivekitRtcReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LiveKit.Proto.NodeType), typeof(global::LiveKit.Proto.NodeState), typeof(global::LiveKit.Proto.ICECandidateType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.Node), global::LiveKit.Proto.Node.Parser, new[]{ "Id", "Ip", "NumCpus", "Stats", "Type", "State", "Region" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.NodeStats), global::LiveKit.Proto.NodeStats.Parser, new[]{ "StartedAt", "UpdatedAt", "NumRooms", "NumClients", "NumTracksIn", "NumTracksOut", "NumTrackPublishAttempts", "TrackPublishAttemptsPerSec", "NumTrackPublishSuccess", "TrackPublishSuccessPerSec", "NumTrackSubscribeAttempts", "TrackSubscribeAttemptsPerSec", "NumTrackSubscribeSuccess", "TrackSubscribeSuccessPerSec", "BytesIn", "BytesOut", "PacketsIn", "PacketsOut", "NackTotal", "BytesInPerSec", "BytesOutPerSec", "PacketsInPerSec", "PacketsOutPerSec", "NackPerSec", "NumCpus", "LoadAvgLast1Min", "LoadAvgLast5Min", "LoadAvgLast15Min", "CpuLoad", "MemoryLoad", "MemoryTotal", "MemoryUsed", "SysPacketsOut", "SysPacketsDropped", "SysPacketsOutPerSec", "SysPacketsDroppedPerSec", "SysPacketsDroppedPctPerSec", "RetransmitBytesOut", "RetransmitPacketsOut", "RetransmitBytesOutPerSec", "RetransmitPacketsOutPerSec", "ParticipantSignalConnected", "ParticipantSignalConnectedPerSec", "ParticipantRtcConnected", "ParticipantRtcConnectedPerSec", "ParticipantRtcInit", "ParticipantRtcInitPerSec", "ForwardLatency", "ForwardJitter", "Rates" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.NodeStatsRate), global::LiveKit.Proto.NodeStatsRate.Parser, new[]{ "StartedAt", "EndedAt", "Duration", "TrackPublishAttempts", "TrackPublishSuccess", "TrackSubscribeAttempts", "TrackSubscribeSuccess", "BytesIn", "BytesOut", "PacketsIn", "PacketsOut", "NackTotal", "SysPacketsOut", "SysPacketsDropped", "RetransmitBytesOut", "RetransmitPacketsOut", "ParticipantSignalConnected", "ParticipantRtcConnected", "ParticipantRtcInit", "CpuLoad", "MemoryLoad", "MemoryUsed", "MemoryTotal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.StartSession), global::LiveKit.Proto.StartSession.Parser, new[]{ "RoomName", "Identity", "ConnectionId", "Reconnect", "AutoSubscribe", "Hidden", "Client", "Recorder", "Name", "GrantsJson", "AdaptiveStream", "ParticipantId", "ReconnectReason", "SubscriberAllowPause", "DisableIceLite", "CreateRoom", "AddTrackRequests", "PublisherOffer", "SyncState", "UseSinglePeerConnection" }, new[]{ "SubscriberAllowPause" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.RoomInternal), global::LiveKit.Proto.RoomInternal.Parser, new[]{ "TrackEgress", "ParticipantEgress", "PlayoutDelay", "AgentDispatches", "SyncStreams", "ReplayEnabled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.ICEConfig), global::LiveKit.Proto.ICEConfig.Parser, new[]{ "PreferenceSubscriber", "PreferencePublisher" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum NodeType {
    [pbr::OriginalName("SERVER")] Server = 0,
    [pbr::OriginalName("CONTROLLER")] Controller = 1,
    [pbr::OriginalName("MEDIA")] Media = 2,
    [pbr::OriginalName("TURN")] Turn = 4,
    [pbr::OriginalName("SWEEPER")] Sweeper = 5,
    [pbr::OriginalName("DIRECTOR")] Director = 6,
    [pbr::OriginalName("HOSTED_AGENT")] HostedAgent = 7,
    [pbr::OriginalName("SETTINGS")] Settings = 8,
  }

  public enum NodeState {
    [pbr::OriginalName("STARTING_UP")] StartingUp = 0,
    [pbr::OriginalName("SERVING")] Serving = 1,
    [pbr::OriginalName("SHUTTING_DOWN")] ShuttingDown = 2,
  }

  public enum ICECandidateType {
    [pbr::OriginalName("ICT_NONE")] IctNone = 0,
    [pbr::OriginalName("ICT_TCP")] IctTcp = 1,
    [pbr::OriginalName("ICT_TLS")] IctTls = 2,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Node : pb::IMessage<Node>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitInternalReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Node(Node other) : this() {
      id_ = other.id_;
      ip_ = other.ip_;
      numCpus_ = other.numCpus_;
      stats_ = other.stats_ != null ? other.stats_.Clone() : null;
      type_ = other.type_;
      state_ = other.state_;
      region_ = other.region_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_cpus" field.</summary>
    public const int NumCpusFieldNumber = 3;
    private uint numCpus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumCpus {
      get { return numCpus_; }
      set {
        numCpus_ = value;
      }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 4;
    private global::LiveKit.Proto.NodeStats stats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LiveKit.Proto.NodeStats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::LiveKit.Proto.NodeType type_ = global::LiveKit.Proto.NodeType.Server;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LiveKit.Proto.NodeType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private global::LiveKit.Proto.NodeState state_ = global::LiveKit.Proto.NodeState.StartingUp;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LiveKit.Proto.NodeState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 7;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Ip != other.Ip) return false;
      if (NumCpus != other.NumCpus) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      if (Type != other.Type) return false;
      if (State != other.State) return false;
      if (Region != other.Region) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (NumCpus != 0) hash ^= NumCpus.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (Type != global::LiveKit.Proto.NodeType.Server) hash ^= Type.GetHashCode();
      if (State != global::LiveKit.Proto.NodeState.StartingUp) hash ^= State.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (NumCpus != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumCpus);
      }
      if (stats_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Stats);
      }
      if (Type != global::LiveKit.Proto.NodeType.Server) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (State != global::LiveKit.Proto.NodeState.StartingUp) {
        output.WriteRawTag(48);
        output.WriteEnum((int) State);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Region);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (NumCpus != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumCpus);
      }
      if (stats_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Stats);
      }
      if (Type != global::LiveKit.Proto.NodeType.Server) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (State != global::LiveKit.Proto.NodeState.StartingUp) {
        output.WriteRawTag(48);
        output.WriteEnum((int) State);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Region);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (NumCpus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumCpus);
      }
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (Type != global::LiveKit.Proto.NodeType.Server) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (State != global::LiveKit.Proto.NodeState.StartingUp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.NumCpus != 0) {
        NumCpus = other.NumCpus;
      }
      if (other.stats_ != null) {
        if (stats_ == null) {
          Stats = new global::LiveKit.Proto.NodeStats();
        }
        Stats.MergeFrom(other.Stats);
      }
      if (other.Type != global::LiveKit.Proto.NodeType.Server) {
        Type = other.Type;
      }
      if (other.State != global::LiveKit.Proto.NodeState.StartingUp) {
        State = other.State;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
          case 24: {
            NumCpus = input.ReadUInt32();
            break;
          }
          case 34: {
            if (stats_ == null) {
              Stats = new global::LiveKit.Proto.NodeStats();
            }
            input.ReadMessage(Stats);
            break;
          }
          case 40: {
            Type = (global::LiveKit.Proto.NodeType) input.ReadEnum();
            break;
          }
          case 48: {
            State = (global::LiveKit.Proto.NodeState) input.ReadEnum();
            break;
          }
          case 58: {
            Region = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
          case 24: {
            NumCpus = input.ReadUInt32();
            break;
          }
          case 34: {
            if (stats_ == null) {
              Stats = new global::LiveKit.Proto.NodeStats();
            }
            input.ReadMessage(Stats);
            break;
          }
          case 40: {
            Type = (global::LiveKit.Proto.NodeType) input.ReadEnum();
            break;
          }
          case 48: {
            State = (global::LiveKit.Proto.NodeState) input.ReadEnum();
            break;
          }
          case 58: {
            Region = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class NodeStats : pb::IMessage<NodeStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeStats> _parser = new pb::MessageParser<NodeStats>(() => new NodeStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NodeStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitInternalReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeStats(NodeStats other) : this() {
      startedAt_ = other.startedAt_;
      updatedAt_ = other.updatedAt_;
      numRooms_ = other.numRooms_;
      numClients_ = other.numClients_;
      numTracksIn_ = other.numTracksIn_;
      numTracksOut_ = other.numTracksOut_;
      numTrackPublishAttempts_ = other.numTrackPublishAttempts_;
      trackPublishAttemptsPerSec_ = other.trackPublishAttemptsPerSec_;
      numTrackPublishSuccess_ = other.numTrackPublishSuccess_;
      trackPublishSuccessPerSec_ = other.trackPublishSuccessPerSec_;
      numTrackSubscribeAttempts_ = other.numTrackSubscribeAttempts_;
      trackSubscribeAttemptsPerSec_ = other.trackSubscribeAttemptsPerSec_;
      numTrackSubscribeSuccess_ = other.numTrackSubscribeSuccess_;
      trackSubscribeSuccessPerSec_ = other.trackSubscribeSuccessPerSec_;
      bytesIn_ = other.bytesIn_;
      bytesOut_ = other.bytesOut_;
      packetsIn_ = other.packetsIn_;
      packetsOut_ = other.packetsOut_;
      nackTotal_ = other.nackTotal_;
      bytesInPerSec_ = other.bytesInPerSec_;
      bytesOutPerSec_ = other.bytesOutPerSec_;
      packetsInPerSec_ = other.packetsInPerSec_;
      packetsOutPerSec_ = other.packetsOutPerSec_;
      nackPerSec_ = other.nackPerSec_;
      numCpus_ = other.numCpus_;
      loadAvgLast1Min_ = other.loadAvgLast1Min_;
      loadAvgLast5Min_ = other.loadAvgLast5Min_;
      loadAvgLast15Min_ = other.loadAvgLast15Min_;
      cpuLoad_ = other.cpuLoad_;
      memoryLoad_ = other.memoryLoad_;
      memoryTotal_ = other.memoryTotal_;
      memoryUsed_ = other.memoryUsed_;
      sysPacketsOut_ = other.sysPacketsOut_;
      sysPacketsDropped_ = other.sysPacketsDropped_;
      sysPacketsOutPerSec_ = other.sysPacketsOutPerSec_;
      sysPacketsDroppedPerSec_ = other.sysPacketsDroppedPerSec_;
      sysPacketsDroppedPctPerSec_ = other.sysPacketsDroppedPctPerSec_;
      retransmitBytesOut_ = other.retransmitBytesOut_;
      retransmitPacketsOut_ = other.retransmitPacketsOut_;
      retransmitBytesOutPerSec_ = other.retransmitBytesOutPerSec_;
      retransmitPacketsOutPerSec_ = other.retransmitPacketsOutPerSec_;
      participantSignalConnected_ = other.participantSignalConnected_;
      participantSignalConnectedPerSec_ = other.participantSignalConnectedPerSec_;
      participantRtcConnected_ = other.participantRtcConnected_;
      participantRtcConnectedPerSec_ = other.participantRtcConnectedPerSec_;
      participantRtcInit_ = other.participantRtcInit_;
      participantRtcInitPerSec_ = other.participantRtcInitPerSec_;
      forwardLatency_ = other.forwardLatency_;
      forwardJitter_ = other.forwardJitter_;
      rates_ = other.rates_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeStats Clone() {
      return new NodeStats(this);
    }

    /// <summary>Field number for the "started_at" field.</summary>
    public const int StartedAtFieldNumber = 1;
    private long startedAt_;
    /// <summary>
    /// when server was started
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StartedAt {
      get { return startedAt_; }
      set {
        startedAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 2;
    private long updatedAt_;
    /// <summary>
    /// when server last reported its status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "num_rooms" field.</summary>
    public const int NumRoomsFieldNumber = 3;
    private int numRooms_;
    /// <summary>
    /// room
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumRooms {
      get { return numRooms_; }
      set {
        numRooms_ = value;
      }
    }

    /// <summary>Field number for the "num_clients" field.</summary>
    public const int NumClientsFieldNumber = 4;
    private int numClients_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumClients {
      get { return numClients_; }
      set {
        numClients_ = value;
      }
    }

    /// <summary>Field number for the "num_tracks_in" field.</summary>
    public const int NumTracksInFieldNumber = 5;
    private int numTracksIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumTracksIn {
      get { return numTracksIn_; }
      set {
        numTracksIn_ = value;
      }
    }

    /// <summary>Field number for the "num_tracks_out" field.</summary>
    public const int NumTracksOutFieldNumber = 6;
    private int numTracksOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumTracksOut {
      get { return numTracksOut_; }
      set {
        numTracksOut_ = value;
      }
    }

    /// <summary>Field number for the "num_track_publish_attempts" field.</summary>
    public const int NumTrackPublishAttemptsFieldNumber = 36;
    private int numTrackPublishAttempts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumTrackPublishAttempts {
      get { return numTrackPublishAttempts_; }
      set {
        numTrackPublishAttempts_ = value;
      }
    }

    /// <summary>Field number for the "track_publish_attempts_per_sec" field.</summary>
    public const int TrackPublishAttemptsPerSecFieldNumber = 37;
    private float trackPublishAttemptsPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrackPublishAttemptsPerSec {
      get { return trackPublishAttemptsPerSec_; }
      set {
        trackPublishAttemptsPerSec_ = value;
      }
    }

    /// <summary>Field number for the "num_track_publish_success" field.</summary>
    public const int NumTrackPublishSuccessFieldNumber = 38;
    private int numTrackPublishSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumTrackPublishSuccess {
      get { return numTrackPublishSuccess_; }
      set {
        numTrackPublishSuccess_ = value;
      }
    }

    /// <summary>Field number for the "track_publish_success_per_sec" field.</summary>
    public const int TrackPublishSuccessPerSecFieldNumber = 39;
    private float trackPublishSuccessPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrackPublishSuccessPerSec {
      get { return trackPublishSuccessPerSec_; }
      set {
        trackPublishSuccessPerSec_ = value;
      }
    }

    /// <summary>Field number for the "num_track_subscribe_attempts" field.</summary>
    public const int NumTrackSubscribeAttemptsFieldNumber = 40;
    private int numTrackSubscribeAttempts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumTrackSubscribeAttempts {
      get { return numTrackSubscribeAttempts_; }
      set {
        numTrackSubscribeAttempts_ = value;
      }
    }

    /// <summary>Field number for the "track_subscribe_attempts_per_sec" field.</summary>
    public const int TrackSubscribeAttemptsPerSecFieldNumber = 41;
    private float trackSubscribeAttemptsPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrackSubscribeAttemptsPerSec {
      get { return trackSubscribeAttemptsPerSec_; }
      set {
        trackSubscribeAttemptsPerSec_ = value;
      }
    }

    /// <summary>Field number for the "num_track_subscribe_success" field.</summary>
    public const int NumTrackSubscribeSuccessFieldNumber = 42;
    private int numTrackSubscribeSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumTrackSubscribeSuccess {
      get { return numTrackSubscribeSuccess_; }
      set {
        numTrackSubscribeSuccess_ = value;
      }
    }

    /// <summary>Field number for the "track_subscribe_success_per_sec" field.</summary>
    public const int TrackSubscribeSuccessPerSecFieldNumber = 43;
    private float trackSubscribeSuccessPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrackSubscribeSuccessPerSec {
      get { return trackSubscribeSuccessPerSec_; }
      set {
        trackSubscribeSuccessPerSec_ = value;
      }
    }

    /// <summary>Field number for the "bytes_in" field.</summary>
    public const int BytesInFieldNumber = 7;
    private ulong bytesIn_;
    /// <summary>
    /// packet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong BytesIn {
      get { return bytesIn_; }
      set {
        bytesIn_ = value;
      }
    }

    /// <summary>Field number for the "bytes_out" field.</summary>
    public const int BytesOutFieldNumber = 8;
    private ulong bytesOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong BytesOut {
      get { return bytesOut_; }
      set {
        bytesOut_ = value;
      }
    }

    /// <summary>Field number for the "packets_in" field.</summary>
    public const int PacketsInFieldNumber = 9;
    private ulong packetsIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong PacketsIn {
      get { return packetsIn_; }
      set {
        packetsIn_ = value;
      }
    }

    /// <summary>Field number for the "packets_out" field.</summary>
    public const int PacketsOutFieldNumber = 10;
    private ulong packetsOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong PacketsOut {
      get { return packetsOut_; }
      set {
        packetsOut_ = value;
      }
    }

    /// <summary>Field number for the "nack_total" field.</summary>
    public const int NackTotalFieldNumber = 11;
    private ulong nackTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong NackTotal {
      get { return nackTotal_; }
      set {
        nackTotal_ = value;
      }
    }

    /// <summary>Field number for the "bytes_in_per_sec" field.</summary>
    public const int BytesInPerSecFieldNumber = 12;
    private float bytesInPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BytesInPerSec {
      get { return bytesInPerSec_; }
      set {
        bytesInPerSec_ = value;
      }
    }

    /// <summary>Field number for the "bytes_out_per_sec" field.</summary>
    public const int BytesOutPerSecFieldNumber = 13;
    private float bytesOutPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BytesOutPerSec {
      get { return bytesOutPerSec_; }
      set {
        bytesOutPerSec_ = value;
      }
    }

    /// <summary>Field number for the "packets_in_per_sec" field.</summary>
    public const int PacketsInPerSecFieldNumber = 14;
    private float packetsInPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PacketsInPerSec {
      get { return packetsInPerSec_; }
      set {
        packetsInPerSec_ = value;
      }
    }

    /// <summary>Field number for the "packets_out_per_sec" field.</summary>
    public const int PacketsOutPerSecFieldNumber = 15;
    private float packetsOutPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PacketsOutPerSec {
      get { return packetsOutPerSec_; }
      set {
        packetsOutPerSec_ = value;
      }
    }

    /// <summary>Field number for the "nack_per_sec" field.</summary>
    public const int NackPerSecFieldNumber = 16;
    private float nackPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NackPerSec {
      get { return nackPerSec_; }
      set {
        nackPerSec_ = value;
      }
    }

    /// <summary>Field number for the "num_cpus" field.</summary>
    public const int NumCpusFieldNumber = 17;
    private uint numCpus_;
    /// <summary>
    /// system
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumCpus {
      get { return numCpus_; }
      set {
        numCpus_ = value;
      }
    }

    /// <summary>Field number for the "load_avg_last1min" field.</summary>
    public const int LoadAvgLast1MinFieldNumber = 18;
    private float loadAvgLast1Min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LoadAvgLast1Min {
      get { return loadAvgLast1Min_; }
      set {
        loadAvgLast1Min_ = value;
      }
    }

    /// <summary>Field number for the "load_avg_last5min" field.</summary>
    public const int LoadAvgLast5MinFieldNumber = 19;
    private float loadAvgLast5Min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LoadAvgLast5Min {
      get { return loadAvgLast5Min_; }
      set {
        loadAvgLast5Min_ = value;
      }
    }

    /// <summary>Field number for the "load_avg_last15min" field.</summary>
    public const int LoadAvgLast15MinFieldNumber = 20;
    private float loadAvgLast15Min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LoadAvgLast15Min {
      get { return loadAvgLast15Min_; }
      set {
        loadAvgLast15Min_ = value;
      }
    }

    /// <summary>Field number for the "cpu_load" field.</summary>
    public const int CpuLoadFieldNumber = 21;
    private float cpuLoad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpuLoad {
      get { return cpuLoad_; }
      set {
        cpuLoad_ = value;
      }
    }

    /// <summary>Field number for the "memory_load" field.</summary>
    public const int MemoryLoadFieldNumber = 33;
    private float memoryLoad_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MemoryLoad {
      get { return memoryLoad_; }
      set {
        memoryLoad_ = value;
      }
    }

    /// <summary>Field number for the "memory_total" field.</summary>
    public const int MemoryTotalFieldNumber = 34;
    private ulong memoryTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MemoryTotal {
      get { return memoryTotal_; }
      set {
        memoryTotal_ = value;
      }
    }

    /// <summary>Field number for the "memory_used" field.</summary>
    public const int MemoryUsedFieldNumber = 35;
    private ulong memoryUsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MemoryUsed {
      get { return memoryUsed_; }
      set {
        memoryUsed_ = value;
      }
    }

    /// <summary>Field number for the "sys_packets_out" field.</summary>
    public const int SysPacketsOutFieldNumber = 28;
    private uint sysPacketsOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SysPacketsOut {
      get { return sysPacketsOut_; }
      set {
        sysPacketsOut_ = value;
      }
    }

    /// <summary>Field number for the "sys_packets_dropped" field.</summary>
    public const int SysPacketsDroppedFieldNumber = 29;
    private uint sysPacketsDropped_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SysPacketsDropped {
      get { return sysPacketsDropped_; }
      set {
        sysPacketsDropped_ = value;
      }
    }

    /// <summary>Field number for the "sys_packets_out_per_sec" field.</summary>
    public const int SysPacketsOutPerSecFieldNumber = 30;
    private float sysPacketsOutPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SysPacketsOutPerSec {
      get { return sysPacketsOutPerSec_; }
      set {
        sysPacketsOutPerSec_ = value;
      }
    }

    /// <summary>Field number for the "sys_packets_dropped_per_sec" field.</summary>
    public const int SysPacketsDroppedPerSecFieldNumber = 31;
    private float sysPacketsDroppedPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SysPacketsDroppedPerSec {
      get { return sysPacketsDroppedPerSec_; }
      set {
        sysPacketsDroppedPerSec_ = value;
      }
    }

    /// <summary>Field number for the "sys_packets_dropped_pct_per_sec" field.</summary>
    public const int SysPacketsDroppedPctPerSecFieldNumber = 32;
    private float sysPacketsDroppedPctPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SysPacketsDroppedPctPerSec {
      get { return sysPacketsDroppedPctPerSec_; }
      set {
        sysPacketsDroppedPctPerSec_ = value;
      }
    }

    /// <summary>Field number for the "retransmit_bytes_out" field.</summary>
    public const int RetransmitBytesOutFieldNumber = 22;
    private ulong retransmitBytesOut_;
    /// <summary>
    /// retransmissions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong RetransmitBytesOut {
      get { return retransmitBytesOut_; }
      set {
        retransmitBytesOut_ = value;
      }
    }

    /// <summary>Field number for the "retransmit_packets_out" field.</summary>
    public const int RetransmitPacketsOutFieldNumber = 23;
    private ulong retransmitPacketsOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong RetransmitPacketsOut {
      get { return retransmitPacketsOut_; }
      set {
        retransmitPacketsOut_ = value;
      }
    }

    /// <summary>Field number for the "retransmit_bytes_out_per_sec" field.</summary>
    public const int RetransmitBytesOutPerSecFieldNumber = 24;
    private float retransmitBytesOutPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RetransmitBytesOutPerSec {
      get { return retransmitBytesOutPerSec_; }
      set {
        retransmitBytesOutPerSec_ = value;
      }
    }

    /// <summary>Field number for the "retransmit_packets_out_per_sec" field.</summary>
    public const int RetransmitPacketsOutPerSecFieldNumber = 25;
    private float retransmitPacketsOutPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RetransmitPacketsOutPerSec {
      get { return retransmitPacketsOutPerSec_; }
      set {
        retransmitPacketsOutPerSec_ = value;
      }
    }

    /// <summary>Field number for the "participant_signal_connected" field.</summary>
    public const int ParticipantSignalConnectedFieldNumber = 26;
    private ulong participantSignalConnected_;
    /// <summary>
    /// participant joins
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ParticipantSignalConnected {
      get { return participantSignalConnected_; }
      set {
        participantSignalConnected_ = value;
      }
    }

    /// <summary>Field number for the "participant_signal_connected_per_sec" field.</summary>
    public const int ParticipantSignalConnectedPerSecFieldNumber = 27;
    private float participantSignalConnectedPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParticipantSignalConnectedPerSec {
      get { return participantSignalConnectedPerSec_; }
      set {
        participantSignalConnectedPerSec_ = value;
      }
    }

    /// <summary>Field number for the "participant_rtc_connected" field.</summary>
    public const int ParticipantRtcConnectedFieldNumber = 44;
    private ulong participantRtcConnected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ParticipantRtcConnected {
      get { return participantRtcConnected_; }
      set {
        participantRtcConnected_ = value;
      }
    }

    /// <summary>Field number for the "participant_rtc_connected_per_sec" field.</summary>
    public const int ParticipantRtcConnectedPerSecFieldNumber = 45;
    private float participantRtcConnectedPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParticipantRtcConnectedPerSec {
      get { return participantRtcConnectedPerSec_; }
      set {
        participantRtcConnectedPerSec_ = value;
      }
    }

    /// <summary>Field number for the "participant_rtc_init" field.</summary>
    public const int ParticipantRtcInitFieldNumber = 46;
    private ulong participantRtcInit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ParticipantRtcInit {
      get { return participantRtcInit_; }
      set {
        participantRtcInit_ = value;
      }
    }

    /// <summary>Field number for the "participant_rtc_init_per_sec" field.</summary>
    public const int ParticipantRtcInitPerSecFieldNumber = 47;
    private float participantRtcInitPerSec_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParticipantRtcInitPerSec {
      get { return participantRtcInitPerSec_; }
      set {
        participantRtcInitPerSec_ = value;
      }
    }

    /// <summary>Field number for the "forward_latency" field.</summary>
    public const int ForwardLatencyFieldNumber = 48;
    private uint forwardLatency_;
    /// <summary>
    /// forward metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ForwardLatency {
      get { return forwardLatency_; }
      set {
        forwardLatency_ = value;
      }
    }

    /// <summary>Field number for the "forward_jitter" field.</summary>
    public const int ForwardJitterFieldNumber = 49;
    private uint forwardJitter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ForwardJitter {
      get { return forwardJitter_; }
      set {
        forwardJitter_ = value;
      }
    }

    /// <summary>Field number for the "rates" field.</summary>
    public const int RatesFieldNumber = 50;
    private static readonly pb::FieldCodec<global::LiveKit.Proto.NodeStatsRate> _repeated_rates_codec
        = pb::FieldCodec.ForMessage(402, global::LiveKit.Proto.NodeStatsRate.Parser);
    private readonly pbc::RepeatedField<global::LiveKit.Proto.NodeStatsRate> rates_ = new pbc::RepeatedField<global::LiveKit.Proto.NodeStatsRate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LiveKit.Proto.NodeStatsRate> Rates {
      get { return rates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NodeStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NodeStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartedAt != other.StartedAt) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      if (NumRooms != other.NumRooms) return false;
      if (NumClients != other.NumClients) return false;
      if (NumTracksIn != other.NumTracksIn) return false;
      if (NumTracksOut != other.NumTracksOut) return false;
      if (NumTrackPublishAttempts != other.NumTrackPublishAttempts) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackPublishAttemptsPerSec, other.TrackPublishAttemptsPerSec)) return false;
      if (NumTrackPublishSuccess != other.NumTrackPublishSuccess) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackPublishSuccessPerSec, other.TrackPublishSuccessPerSec)) return false;
      if (NumTrackSubscribeAttempts != other.NumTrackSubscribeAttempts) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackSubscribeAttemptsPerSec, other.TrackSubscribeAttemptsPerSec)) return false;
      if (NumTrackSubscribeSuccess != other.NumTrackSubscribeSuccess) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackSubscribeSuccessPerSec, other.TrackSubscribeSuccessPerSec)) return false;
      if (BytesIn != other.BytesIn) return false;
      if (BytesOut != other.BytesOut) return false;
      if (PacketsIn != other.PacketsIn) return false;
      if (PacketsOut != other.PacketsOut) return false;
      if (NackTotal != other.NackTotal) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BytesInPerSec, other.BytesInPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BytesOutPerSec, other.BytesOutPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PacketsInPerSec, other.PacketsInPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PacketsOutPerSec, other.PacketsOutPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NackPerSec, other.NackPerSec)) return false;
      if (NumCpus != other.NumCpus) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LoadAvgLast1Min, other.LoadAvgLast1Min)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LoadAvgLast5Min, other.LoadAvgLast5Min)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LoadAvgLast15Min, other.LoadAvgLast15Min)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpuLoad, other.CpuLoad)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MemoryLoad, other.MemoryLoad)) return false;
      if (MemoryTotal != other.MemoryTotal) return false;
      if (MemoryUsed != other.MemoryUsed) return false;
      if (SysPacketsOut != other.SysPacketsOut) return false;
      if (SysPacketsDropped != other.SysPacketsDropped) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SysPacketsOutPerSec, other.SysPacketsOutPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SysPacketsDroppedPerSec, other.SysPacketsDroppedPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SysPacketsDroppedPctPerSec, other.SysPacketsDroppedPctPerSec)) return false;
      if (RetransmitBytesOut != other.RetransmitBytesOut) return false;
      if (RetransmitPacketsOut != other.RetransmitPacketsOut) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RetransmitBytesOutPerSec, other.RetransmitBytesOutPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RetransmitPacketsOutPerSec, other.RetransmitPacketsOutPerSec)) return false;
      if (ParticipantSignalConnected != other.ParticipantSignalConnected) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParticipantSignalConnectedPerSec, other.ParticipantSignalConnectedPerSec)) return false;
      if (ParticipantRtcConnected != other.ParticipantRtcConnected) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParticipantRtcConnectedPerSec, other.ParticipantRtcConnectedPerSec)) return false;
      if (ParticipantRtcInit != other.ParticipantRtcInit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParticipantRtcInitPerSec, other.ParticipantRtcInitPerSec)) return false;
      if (ForwardLatency != other.ForwardLatency) return false;
      if (ForwardJitter != other.ForwardJitter) return false;
      if(!rates_.Equals(other.rates_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StartedAt != 0L) hash ^= StartedAt.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      if (NumRooms != 0) hash ^= NumRooms.GetHashCode();
      if (NumClients != 0) hash ^= NumClients.GetHashCode();
      if (NumTracksIn != 0) hash ^= NumTracksIn.GetHashCode();
      if (NumTracksOut != 0) hash ^= NumTracksOut.GetHashCode();
      if (NumTrackPublishAttempts != 0) hash ^= NumTrackPublishAttempts.GetHashCode();
      if (TrackPublishAttemptsPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackPublishAttemptsPerSec);
      if (NumTrackPublishSuccess != 0) hash ^= NumTrackPublishSuccess.GetHashCode();
      if (TrackPublishSuccessPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackPublishSuccessPerSec);
      if (NumTrackSubscribeAttempts != 0) hash ^= NumTrackSubscribeAttempts.GetHashCode();
      if (TrackSubscribeAttemptsPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackSubscribeAttemptsPerSec);
      if (NumTrackSubscribeSuccess != 0) hash ^= NumTrackSubscribeSuccess.GetHashCode();
      if (TrackSubscribeSuccessPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackSubscribeSuccessPerSec);
      if (BytesIn != 0UL) hash ^= BytesIn.GetHashCode();
      if (BytesOut != 0UL) hash ^= BytesOut.GetHashCode();
      if (PacketsIn != 0UL) hash ^= PacketsIn.GetHashCode();
      if (PacketsOut != 0UL) hash ^= PacketsOut.GetHashCode();
      if (NackTotal != 0UL) hash ^= NackTotal.GetHashCode();
      if (BytesInPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BytesInPerSec);
      if (BytesOutPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BytesOutPerSec);
      if (PacketsInPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PacketsInPerSec);
      if (PacketsOutPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PacketsOutPerSec);
      if (NackPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NackPerSec);
      if (NumCpus != 0) hash ^= NumCpus.GetHashCode();
      if (LoadAvgLast1Min != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LoadAvgLast1Min);
      if (LoadAvgLast5Min != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LoadAvgLast5Min);
      if (LoadAvgLast15Min != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LoadAvgLast15Min);
      if (CpuLoad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpuLoad);
      if (MemoryLoad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MemoryLoad);
      if (MemoryTotal != 0UL) hash ^= MemoryTotal.GetHashCode();
      if (MemoryUsed != 0UL) hash ^= MemoryUsed.GetHashCode();
      if (SysPacketsOut != 0) hash ^= SysPacketsOut.GetHashCode();
      if (SysPacketsDropped != 0) hash ^= SysPacketsDropped.GetHashCode();
      if (SysPacketsOutPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SysPacketsOutPerSec);
      if (SysPacketsDroppedPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SysPacketsDroppedPerSec);
      if (SysPacketsDroppedPctPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SysPacketsDroppedPctPerSec);
      if (RetransmitBytesOut != 0UL) hash ^= RetransmitBytesOut.GetHashCode();
      if (RetransmitPacketsOut != 0UL) hash ^= RetransmitPacketsOut.GetHashCode();
      if (RetransmitBytesOutPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RetransmitBytesOutPerSec);
      if (RetransmitPacketsOutPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RetransmitPacketsOutPerSec);
      if (ParticipantSignalConnected != 0UL) hash ^= ParticipantSignalConnected.GetHashCode();
      if (ParticipantSignalConnectedPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParticipantSignalConnectedPerSec);
      if (ParticipantRtcConnected != 0UL) hash ^= ParticipantRtcConnected.GetHashCode();
      if (ParticipantRtcConnectedPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParticipantRtcConnectedPerSec);
      if (ParticipantRtcInit != 0UL) hash ^= ParticipantRtcInit.GetHashCode();
      if (ParticipantRtcInitPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParticipantRtcInitPerSec);
      if (ForwardLatency != 0) hash ^= ForwardLatency.GetHashCode();
      if (ForwardJitter != 0) hash ^= ForwardJitter.GetHashCode();
      hash ^= rates_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StartedAt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartedAt);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UpdatedAt);
      }
      if (NumRooms != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumRooms);
      }
      if (NumClients != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NumClients);
      }
      if (NumTracksIn != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NumTracksIn);
      }
      if (NumTracksOut != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumTracksOut);
      }
      if (BytesIn != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(BytesIn);
      }
      if (BytesOut != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(BytesOut);
      }
      if (PacketsIn != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(PacketsIn);
      }
      if (PacketsOut != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(PacketsOut);
      }
      if (NackTotal != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(NackTotal);
      }
      if (BytesInPerSec != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(BytesInPerSec);
      }
      if (BytesOutPerSec != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(BytesOutPerSec);
      }
      if (PacketsInPerSec != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(PacketsInPerSec);
      }
      if (PacketsOutPerSec != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(PacketsOutPerSec);
      }
      if (NackPerSec != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(NackPerSec);
      }
      if (NumCpus != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(NumCpus);
      }
      if (LoadAvgLast1Min != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(LoadAvgLast1Min);
      }
      if (LoadAvgLast5Min != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(LoadAvgLast5Min);
      }
      if (LoadAvgLast15Min != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(LoadAvgLast15Min);
      }
      if (CpuLoad != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(CpuLoad);
      }
      if (RetransmitBytesOut != 0UL) {
        output.WriteRawTag(176, 1);
        output.WriteUInt64(RetransmitBytesOut);
      }
      if (RetransmitPacketsOut != 0UL) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(RetransmitPacketsOut);
      }
      if (RetransmitBytesOutPerSec != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(RetransmitBytesOutPerSec);
      }
      if (RetransmitPacketsOutPerSec != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(RetransmitPacketsOutPerSec);
      }
      if (ParticipantSignalConnected != 0UL) {
        output.WriteRawTag(208, 1);
        output.WriteUInt64(ParticipantSignalConnected);
      }
      if (ParticipantSignalConnectedPerSec != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(ParticipantSignalConnectedPerSec);
      }
      if (SysPacketsOut != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(SysPacketsOut);
      }
      if (SysPacketsDropped != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(SysPacketsDropped);
      }
      if (SysPacketsOutPerSec != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(SysPacketsOutPerSec);
      }
      if (SysPacketsDroppedPerSec != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(SysPacketsDroppedPerSec);
      }
      if (SysPacketsDroppedPctPerSec != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(SysPacketsDroppedPctPerSec);
      }
      if (MemoryLoad != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(MemoryLoad);
      }
      if (MemoryTotal != 0UL) {
        output.WriteRawTag(144, 2);
        output.WriteUInt64(MemoryTotal);
      }
      if (MemoryUsed != 0UL) {
        output.WriteRawTag(152, 2);
        output.WriteUInt64(MemoryUsed);
      }
      if (NumTrackPublishAttempts != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(NumTrackPublishAttempts);
      }
      if (TrackPublishAttemptsPerSec != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(TrackPublishAttemptsPerSec);
      }
      if (NumTrackPublishSuccess != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(NumTrackPublishSuccess);
      }
      if (TrackPublishSuccessPerSec != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(TrackPublishSuccessPerSec);
      }
      if (NumTrackSubscribeAttempts != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(NumTrackSubscribeAttempts);
      }
      if (TrackSubscribeAttemptsPerSec != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(TrackSubscribeAttemptsPerSec);
      }
      if (NumTrackSubscribeSuccess != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(NumTrackSubscribeSuccess);
      }
      if (TrackSubscribeSuccessPerSec != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(TrackSubscribeSuccessPerSec);
      }
      if (ParticipantRtcConnected != 0UL) {
        output.WriteRawTag(224, 2);
        output.WriteUInt64(ParticipantRtcConnected);
      }
      if (ParticipantRtcConnectedPerSec != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(ParticipantRtcConnectedPerSec);
      }
      if (ParticipantRtcInit != 0UL) {
        output.WriteRawTag(240, 2);
        output.WriteUInt64(ParticipantRtcInit);
      }
      if (ParticipantRtcInitPerSec != 0F) {
        output.WriteRawTag(253, 2);
        output.WriteFloat(ParticipantRtcInitPerSec);
      }
      if (ForwardLatency != 0) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(ForwardLatency);
      }
      if (ForwardJitter != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(ForwardJitter);
      }
      rates_.WriteTo(output, _repeated_rates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StartedAt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartedAt);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UpdatedAt);
      }
      if (NumRooms != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumRooms);
      }
      if (NumClients != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NumClients);
      }
      if (NumTracksIn != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NumTracksIn);
      }
      if (NumTracksOut != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumTracksOut);
      }
      if (BytesIn != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(BytesIn);
      }
      if (BytesOut != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(BytesOut);
      }
      if (PacketsIn != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(PacketsIn);
      }
      if (PacketsOut != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(PacketsOut);
      }
      if (NackTotal != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(NackTotal);
      }
      if (BytesInPerSec != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(BytesInPerSec);
      }
      if (BytesOutPerSec != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(BytesOutPerSec);
      }
      if (PacketsInPerSec != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(PacketsInPerSec);
      }
      if (PacketsOutPerSec != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(PacketsOutPerSec);
      }
      if (NackPerSec != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(NackPerSec);
      }
      if (NumCpus != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(NumCpus);
      }
      if (LoadAvgLast1Min != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(LoadAvgLast1Min);
      }
      if (LoadAvgLast5Min != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(LoadAvgLast5Min);
      }
      if (LoadAvgLast15Min != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(LoadAvgLast15Min);
      }
      if (CpuLoad != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(CpuLoad);
      }
      if (RetransmitBytesOut != 0UL) {
        output.WriteRawTag(176, 1);
        output.WriteUInt64(RetransmitBytesOut);
      }
      if (RetransmitPacketsOut != 0UL) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(RetransmitPacketsOut);
      }
      if (RetransmitBytesOutPerSec != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(RetransmitBytesOutPerSec);
      }
      if (RetransmitPacketsOutPerSec != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(RetransmitPacketsOutPerSec);
      }
      if (ParticipantSignalConnected != 0UL) {
        output.WriteRawTag(208, 1);
        output.WriteUInt64(ParticipantSignalConnected);
      }
      if (ParticipantSignalConnectedPerSec != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(ParticipantSignalConnectedPerSec);
      }
      if (SysPacketsOut != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(SysPacketsOut);
      }
      if (SysPacketsDropped != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(SysPacketsDropped);
      }
      if (SysPacketsOutPerSec != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(SysPacketsOutPerSec);
      }
      if (SysPacketsDroppedPerSec != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(SysPacketsDroppedPerSec);
      }
      if (SysPacketsDroppedPctPerSec != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(SysPacketsDroppedPctPerSec);
      }
      if (MemoryLoad != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(MemoryLoad);
      }
      if (MemoryTotal != 0UL) {
        output.WriteRawTag(144, 2);
        output.WriteUInt64(MemoryTotal);
      }
      if (MemoryUsed != 0UL) {
        output.WriteRawTag(152, 2);
        output.WriteUInt64(MemoryUsed);
      }
      if (NumTrackPublishAttempts != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(NumTrackPublishAttempts);
      }
      if (TrackPublishAttemptsPerSec != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(TrackPublishAttemptsPerSec);
      }
      if (NumTrackPublishSuccess != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(NumTrackPublishSuccess);
      }
      if (TrackPublishSuccessPerSec != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(TrackPublishSuccessPerSec);
      }
      if (NumTrackSubscribeAttempts != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(NumTrackSubscribeAttempts);
      }
      if (TrackSubscribeAttemptsPerSec != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(TrackSubscribeAttemptsPerSec);
      }
      if (NumTrackSubscribeSuccess != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(NumTrackSubscribeSuccess);
      }
      if (TrackSubscribeSuccessPerSec != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(TrackSubscribeSuccessPerSec);
      }
      if (ParticipantRtcConnected != 0UL) {
        output.WriteRawTag(224, 2);
        output.WriteUInt64(ParticipantRtcConnected);
      }
      if (ParticipantRtcConnectedPerSec != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(ParticipantRtcConnectedPerSec);
      }
      if (ParticipantRtcInit != 0UL) {
        output.WriteRawTag(240, 2);
        output.WriteUInt64(ParticipantRtcInit);
      }
      if (ParticipantRtcInitPerSec != 0F) {
        output.WriteRawTag(253, 2);
        output.WriteFloat(ParticipantRtcInitPerSec);
      }
      if (ForwardLatency != 0) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(ForwardLatency);
      }
      if (ForwardJitter != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(ForwardJitter);
      }
      rates_.WriteTo(ref output, _repeated_rates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StartedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartedAt);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      if (NumRooms != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumRooms);
      }
      if (NumClients != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumClients);
      }
      if (NumTracksIn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumTracksIn);
      }
      if (NumTracksOut != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumTracksOut);
      }
      if (NumTrackPublishAttempts != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumTrackPublishAttempts);
      }
      if (TrackPublishAttemptsPerSec != 0F) {
        size += 2 + 4;
      }
      if (NumTrackPublishSuccess != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumTrackPublishSuccess);
      }
      if (TrackPublishSuccessPerSec != 0F) {
        size += 2 + 4;
      }
      if (NumTrackSubscribeAttempts != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumTrackSubscribeAttempts);
      }
      if (TrackSubscribeAttemptsPerSec != 0F) {
        size += 2 + 4;
      }
      if (NumTrackSubscribeSuccess != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumTrackSubscribeSuccess);
      }
      if (TrackSubscribeSuccessPerSec != 0F) {
        size += 2 + 4;
      }
      if (BytesIn != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesIn);
      }
      if (BytesOut != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesOut);
      }
      if (PacketsIn != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PacketsIn);
      }
      if (PacketsOut != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PacketsOut);
      }
      if (NackTotal != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NackTotal);
      }
      if (BytesInPerSec != 0F) {
        size += 1 + 4;
      }
      if (BytesOutPerSec != 0F) {
        size += 1 + 4;
      }
      if (PacketsInPerSec != 0F) {
        size += 1 + 4;
      }
      if (PacketsOutPerSec != 0F) {
        size += 1 + 4;
      }
      if (NackPerSec != 0F) {
        size += 2 + 4;
      }
      if (NumCpus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumCpus);
      }
      if (LoadAvgLast1Min != 0F) {
        size += 2 + 4;
      }
      if (LoadAvgLast5Min != 0F) {
        size += 2 + 4;
      }
      if (LoadAvgLast15Min != 0F) {
        size += 2 + 4;
      }
      if (CpuLoad != 0F) {
        size += 2 + 4;
      }
      if (MemoryLoad != 0F) {
        size += 2 + 4;
      }
      if (MemoryTotal != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MemoryTotal);
      }
      if (MemoryUsed != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MemoryUsed);
      }
      if (SysPacketsOut != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SysPacketsOut);
      }
      if (SysPacketsDropped != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SysPacketsDropped);
      }
      if (SysPacketsOutPerSec != 0F) {
        size += 2 + 4;
      }
      if (SysPacketsDroppedPerSec != 0F) {
        size += 2 + 4;
      }
      if (SysPacketsDroppedPctPerSec != 0F) {
        size += 2 + 4;
      }
      if (RetransmitBytesOut != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RetransmitBytesOut);
      }
      if (RetransmitPacketsOut != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RetransmitPacketsOut);
      }
      if (RetransmitBytesOutPerSec != 0F) {
        size += 2 + 4;
      }
      if (RetransmitPacketsOutPerSec != 0F) {
        size += 2 + 4;
      }
      if (ParticipantSignalConnected != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ParticipantSignalConnected);
      }
      if (ParticipantSignalConnectedPerSec != 0F) {
        size += 2 + 4;
      }
      if (ParticipantRtcConnected != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ParticipantRtcConnected);
      }
      if (ParticipantRtcConnectedPerSec != 0F) {
        size += 2 + 4;
      }
      if (ParticipantRtcInit != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ParticipantRtcInit);
      }
      if (ParticipantRtcInitPerSec != 0F) {
        size += 2 + 4;
      }
      if (ForwardLatency != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ForwardLatency);
      }
      if (ForwardJitter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ForwardJitter);
      }
      size += rates_.CalculateSize(_repeated_rates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NodeStats other) {
      if (other == null) {
        return;
      }
      if (other.StartedAt != 0L) {
        StartedAt = other.StartedAt;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
      if (other.NumRooms != 0) {
        NumRooms = other.NumRooms;
      }
      if (other.NumClients != 0) {
        NumClients = other.NumClients;
      }
      if (other.NumTracksIn != 0) {
        NumTracksIn = other.NumTracksIn;
      }
      if (other.NumTracksOut != 0) {
        NumTracksOut = other.NumTracksOut;
      }
      if (other.NumTrackPublishAttempts != 0) {
        NumTrackPublishAttempts = other.NumTrackPublishAttempts;
      }
      if (other.TrackPublishAttemptsPerSec != 0F) {
        TrackPublishAttemptsPerSec = other.TrackPublishAttemptsPerSec;
      }
      if (other.NumTrackPublishSuccess != 0) {
        NumTrackPublishSuccess = other.NumTrackPublishSuccess;
      }
      if (other.TrackPublishSuccessPerSec != 0F) {
        TrackPublishSuccessPerSec = other.TrackPublishSuccessPerSec;
      }
      if (other.NumTrackSubscribeAttempts != 0) {
        NumTrackSubscribeAttempts = other.NumTrackSubscribeAttempts;
      }
      if (other.TrackSubscribeAttemptsPerSec != 0F) {
        TrackSubscribeAttemptsPerSec = other.TrackSubscribeAttemptsPerSec;
      }
      if (other.NumTrackSubscribeSuccess != 0) {
        NumTrackSubscribeSuccess = other.NumTrackSubscribeSuccess;
      }
      if (other.TrackSubscribeSuccessPerSec != 0F) {
        TrackSubscribeSuccessPerSec = other.TrackSubscribeSuccessPerSec;
      }
      if (other.BytesIn != 0UL) {
        BytesIn = other.BytesIn;
      }
      if (other.BytesOut != 0UL) {
        BytesOut = other.BytesOut;
      }
      if (other.PacketsIn != 0UL) {
        PacketsIn = other.PacketsIn;
      }
      if (other.PacketsOut != 0UL) {
        PacketsOut = other.PacketsOut;
      }
      if (other.NackTotal != 0UL) {
        NackTotal = other.NackTotal;
      }
      if (other.BytesInPerSec != 0F) {
        BytesInPerSec = other.BytesInPerSec;
      }
      if (other.BytesOutPerSec != 0F) {
        BytesOutPerSec = other.BytesOutPerSec;
      }
      if (other.PacketsInPerSec != 0F) {
        PacketsInPerSec = other.PacketsInPerSec;
      }
      if (other.PacketsOutPerSec != 0F) {
        PacketsOutPerSec = other.PacketsOutPerSec;
      }
      if (other.NackPerSec != 0F) {
        NackPerSec = other.NackPerSec;
      }
      if (other.NumCpus != 0) {
        NumCpus = other.NumCpus;
      }
      if (other.LoadAvgLast1Min != 0F) {
        LoadAvgLast1Min = other.LoadAvgLast1Min;
      }
      if (other.LoadAvgLast5Min != 0F) {
        LoadAvgLast5Min = other.LoadAvgLast5Min;
      }
      if (other.LoadAvgLast15Min != 0F) {
        LoadAvgLast15Min = other.LoadAvgLast15Min;
      }
      if (other.CpuLoad != 0F) {
        CpuLoad = other.CpuLoad;
      }
      if (other.MemoryLoad != 0F) {
        MemoryLoad = other.MemoryLoad;
      }
      if (other.MemoryTotal != 0UL) {
        MemoryTotal = other.MemoryTotal;
      }
      if (other.MemoryUsed != 0UL) {
        MemoryUsed = other.MemoryUsed;
      }
      if (other.SysPacketsOut != 0) {
        SysPacketsOut = other.SysPacketsOut;
      }
      if (other.SysPacketsDropped != 0) {
        SysPacketsDropped = other.SysPacketsDropped;
      }
      if (other.SysPacketsOutPerSec != 0F) {
        SysPacketsOutPerSec = other.SysPacketsOutPerSec;
      }
      if (other.SysPacketsDroppedPerSec != 0F) {
        SysPacketsDroppedPerSec = other.SysPacketsDroppedPerSec;
      }
      if (other.SysPacketsDroppedPctPerSec != 0F) {
        SysPacketsDroppedPctPerSec = other.SysPacketsDroppedPctPerSec;
      }
      if (other.RetransmitBytesOut != 0UL) {
        RetransmitBytesOut = other.RetransmitBytesOut;
      }
      if (other.RetransmitPacketsOut != 0UL) {
        RetransmitPacketsOut = other.RetransmitPacketsOut;
      }
      if (other.RetransmitBytesOutPerSec != 0F) {
        RetransmitBytesOutPerSec = other.RetransmitBytesOutPerSec;
      }
      if (other.RetransmitPacketsOutPerSec != 0F) {
        RetransmitPacketsOutPerSec = other.RetransmitPacketsOutPerSec;
      }
      if (other.ParticipantSignalConnected != 0UL) {
        ParticipantSignalConnected = other.ParticipantSignalConnected;
      }
      if (other.ParticipantSignalConnectedPerSec != 0F) {
        ParticipantSignalConnectedPerSec = other.ParticipantSignalConnectedPerSec;
      }
      if (other.ParticipantRtcConnected != 0UL) {
        ParticipantRtcConnected = other.ParticipantRtcConnected;
      }
      if (other.ParticipantRtcConnectedPerSec != 0F) {
        ParticipantRtcConnectedPerSec = other.ParticipantRtcConnectedPerSec;
      }
      if (other.ParticipantRtcInit != 0UL) {
        ParticipantRtcInit = other.ParticipantRtcInit;
      }
      if (other.ParticipantRtcInitPerSec != 0F) {
        ParticipantRtcInitPerSec = other.ParticipantRtcInitPerSec;
      }
      if (other.ForwardLatency != 0) {
        ForwardLatency = other.ForwardLatency;
      }
      if (other.ForwardJitter != 0) {
        ForwardJitter = other.ForwardJitter;
      }
      rates_.Add(other.rates_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartedAt = input.ReadInt64();
            break;
          }
          case 16: {
            UpdatedAt = input.ReadInt64();
            break;
          }
          case 24: {
            NumRooms = input.ReadInt32();
            break;
          }
          case 32: {
            NumClients = input.ReadInt32();
            break;
          }
          case 40: {
            NumTracksIn = input.ReadInt32();
            break;
          }
          case 48: {
            NumTracksOut = input.ReadInt32();
            break;
          }
          case 56: {
            BytesIn = input.ReadUInt64();
            break;
          }
          case 64: {
            BytesOut = input.ReadUInt64();
            break;
          }
          case 72: {
            PacketsIn = input.ReadUInt64();
            break;
          }
          case 80: {
            PacketsOut = input.ReadUInt64();
            break;
          }
          case 88: {
            NackTotal = input.ReadUInt64();
            break;
          }
          case 101: {
            BytesInPerSec = input.ReadFloat();
            break;
          }
          case 109: {
            BytesOutPerSec = input.ReadFloat();
            break;
          }
          case 117: {
            PacketsInPerSec = input.ReadFloat();
            break;
          }
          case 125: {
            PacketsOutPerSec = input.ReadFloat();
            break;
          }
          case 133: {
            NackPerSec = input.ReadFloat();
            break;
          }
          case 136: {
            NumCpus = input.ReadUInt32();
            break;
          }
          case 149: {
            LoadAvgLast1Min = input.ReadFloat();
            break;
          }
          case 157: {
            LoadAvgLast5Min = input.ReadFloat();
            break;
          }
          case 165: {
            LoadAvgLast15Min = input.ReadFloat();
            break;
          }
          case 173: {
            CpuLoad = input.ReadFloat();
            break;
          }
          case 176: {
            RetransmitBytesOut = input.ReadUInt64();
            break;
          }
          case 184: {
            RetransmitPacketsOut = input.ReadUInt64();
            break;
          }
          case 197: {
            RetransmitBytesOutPerSec = input.ReadFloat();
            break;
          }
          case 205: {
            RetransmitPacketsOutPerSec = input.ReadFloat();
            break;
          }
          case 208: {
            ParticipantSignalConnected = input.ReadUInt64();
            break;
          }
          case 221: {
            ParticipantSignalConnectedPerSec = input.ReadFloat();
            break;
          }
          case 224: {
            SysPacketsOut = input.ReadUInt32();
            break;
          }
          case 232: {
            SysPacketsDropped = input.ReadUInt32();
            break;
          }
          case 245: {
            SysPacketsOutPerSec = input.ReadFloat();
            break;
          }
          case 253: {
            SysPacketsDroppedPerSec = input.ReadFloat();
            break;
          }
          case 261: {
            SysPacketsDroppedPctPerSec = input.ReadFloat();
            break;
          }
          case 269: {
            MemoryLoad = input.ReadFloat();
            break;
          }
          case 272: {
            MemoryTotal = input.ReadUInt64();
            break;
          }
          case 280: {
            MemoryUsed = input.ReadUInt64();
            break;
          }
          case 288: {
            NumTrackPublishAttempts = input.ReadInt32();
            break;
          }
          case 301: {
            TrackPublishAttemptsPerSec = input.ReadFloat();
            break;
          }
          case 304: {
            NumTrackPublishSuccess = input.ReadInt32();
            break;
          }
          case 317: {
            TrackPublishSuccessPerSec = input.ReadFloat();
            break;
          }
          case 320: {
            NumTrackSubscribeAttempts = input.ReadInt32();
            break;
          }
          case 333: {
            TrackSubscribeAttemptsPerSec = input.ReadFloat();
            break;
          }
          case 336: {
            NumTrackSubscribeSuccess = input.ReadInt32();
            break;
          }
          case 349: {
            TrackSubscribeSuccessPerSec = input.ReadFloat();
            break;
          }
          case 352: {
            ParticipantRtcConnected = input.ReadUInt64();
            break;
          }
          case 365: {
            ParticipantRtcConnectedPerSec = input.ReadFloat();
            break;
          }
          case 368: {
            ParticipantRtcInit = input.ReadUInt64();
            break;
          }
          case 381: {
            ParticipantRtcInitPerSec = input.ReadFloat();
            break;
          }
          case 384: {
            ForwardLatency = input.ReadUInt32();
            break;
          }
          case 392: {
            ForwardJitter = input.ReadUInt32();
            break;
          }
          case 402: {
            rates_.AddEntriesFrom(input, _repeated_rates_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartedAt = input.ReadInt64();
            break;
          }
          case 16: {
            UpdatedAt = input.ReadInt64();
            break;
          }
          case 24: {
            NumRooms = input.ReadInt32();
            break;
          }
          case 32: {
            NumClients = input.ReadInt32();
            break;
          }
          case 40: {
            NumTracksIn = input.ReadInt32();
            break;
          }
          case 48: {
            NumTracksOut = input.ReadInt32();
            break;
          }
          case 56: {
            BytesIn = input.ReadUInt64();
            break;
          }
          case 64: {
            BytesOut = input.ReadUInt64();
            break;
          }
          case 72: {
            PacketsIn = input.ReadUInt64();
            break;
          }
          case 80: {
            PacketsOut = input.ReadUInt64();
            break;
          }
          case 88: {
            NackTotal = input.ReadUInt64();
            break;
          }
          case 101: {
            BytesInPerSec = input.ReadFloat();
            break;
          }
          case 109: {
            BytesOutPerSec = input.ReadFloat();
            break;
          }
          case 117: {
            PacketsInPerSec = input.ReadFloat();
            break;
          }
          case 125: {
            PacketsOutPerSec = input.ReadFloat();
            break;
          }
          case 133: {
            NackPerSec = input.ReadFloat();
            break;
          }
          case 136: {
            NumCpus = input.ReadUInt32();
            break;
          }
          case 149: {
            LoadAvgLast1Min = input.ReadFloat();
            break;
          }
          case 157: {
            LoadAvgLast5Min = input.ReadFloat();
            break;
          }
          case 165: {
            LoadAvgLast15Min = input.ReadFloat();
            break;
          }
          case 173: {
            CpuLoad = input.ReadFloat();
            break;
          }
          case 176: {
            RetransmitBytesOut = input.ReadUInt64();
            break;
          }
          case 184: {
            RetransmitPacketsOut = input.ReadUInt64();
            break;
          }
          case 197: {
            RetransmitBytesOutPerSec = input.ReadFloat();
            break;
          }
          case 205: {
            RetransmitPacketsOutPerSec = input.ReadFloat();
            break;
          }
          case 208: {
            ParticipantSignalConnected = input.ReadUInt64();
            break;
          }
          case 221: {
            ParticipantSignalConnectedPerSec = input.ReadFloat();
            break;
          }
          case 224: {
            SysPacketsOut = input.ReadUInt32();
            break;
          }
          case 232: {
            SysPacketsDropped = input.ReadUInt32();
            break;
          }
          case 245: {
            SysPacketsOutPerSec = input.ReadFloat();
            break;
          }
          case 253: {
            SysPacketsDroppedPerSec = input.ReadFloat();
            break;
          }
          case 261: {
            SysPacketsDroppedPctPerSec = input.ReadFloat();
            break;
          }
          case 269: {
            MemoryLoad = input.ReadFloat();
            break;
          }
          case 272: {
            MemoryTotal = input.ReadUInt64();
            break;
          }
          case 280: {
            MemoryUsed = input.ReadUInt64();
            break;
          }
          case 288: {
            NumTrackPublishAttempts = input.ReadInt32();
            break;
          }
          case 301: {
            TrackPublishAttemptsPerSec = input.ReadFloat();
            break;
          }
          case 304: {
            NumTrackPublishSuccess = input.ReadInt32();
            break;
          }
          case 317: {
            TrackPublishSuccessPerSec = input.ReadFloat();
            break;
          }
          case 320: {
            NumTrackSubscribeAttempts = input.ReadInt32();
            break;
          }
          case 333: {
            TrackSubscribeAttemptsPerSec = input.ReadFloat();
            break;
          }
          case 336: {
            NumTrackSubscribeSuccess = input.ReadInt32();
            break;
          }
          case 349: {
            TrackSubscribeSuccessPerSec = input.ReadFloat();
            break;
          }
          case 352: {
            ParticipantRtcConnected = input.ReadUInt64();
            break;
          }
          case 365: {
            ParticipantRtcConnectedPerSec = input.ReadFloat();
            break;
          }
          case 368: {
            ParticipantRtcInit = input.ReadUInt64();
            break;
          }
          case 381: {
            ParticipantRtcInitPerSec = input.ReadFloat();
            break;
          }
          case 384: {
            ForwardLatency = input.ReadUInt32();
            break;
          }
          case 392: {
            ForwardJitter = input.ReadUInt32();
            break;
          }
          case 402: {
            rates_.AddEntriesFrom(ref input, _repeated_rates_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// rates of different node stats (per second)
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class NodeStatsRate : pb::IMessage<NodeStatsRate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeStatsRate> _parser = new pb::MessageParser<NodeStatsRate>(() => new NodeStatsRate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NodeStatsRate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitInternalReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeStatsRate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeStatsRate(NodeStatsRate other) : this() {
      startedAt_ = other.startedAt_;
      endedAt_ = other.endedAt_;
      duration_ = other.duration_;
      trackPublishAttempts_ = other.trackPublishAttempts_;
      trackPublishSuccess_ = other.trackPublishSuccess_;
      trackSubscribeAttempts_ = other.trackSubscribeAttempts_;
      trackSubscribeSuccess_ = other.trackSubscribeSuccess_;
      bytesIn_ = other.bytesIn_;
      bytesOut_ = other.bytesOut_;
      packetsIn_ = other.packetsIn_;
      packetsOut_ = other.packetsOut_;
      nackTotal_ = other.nackTotal_;
      sysPacketsOut_ = other.sysPacketsOut_;
      sysPacketsDropped_ = other.sysPacketsDropped_;
      retransmitBytesOut_ = other.retransmitBytesOut_;
      retransmitPacketsOut_ = other.retransmitPacketsOut_;
      participantSignalConnected_ = other.participantSignalConnected_;
      participantRtcConnected_ = other.participantRtcConnected_;
      participantRtcInit_ = other.participantRtcInit_;
      cpuLoad_ = other.cpuLoad_;
      memoryLoad_ = other.memoryLoad_;
      memoryUsed_ = other.memoryUsed_;
      memoryTotal_ = other.memoryTotal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeStatsRate Clone() {
      return new NodeStatsRate(this);
    }

    /// <summary>Field number for the "started_at" field.</summary>
    public const int StartedAtFieldNumber = 1;
    private long startedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StartedAt {
      get { return startedAt_; }
      set {
        startedAt_ = value;
      }
    }

    /// <summary>Field number for the "ended_at" field.</summary>
    public const int EndedAtFieldNumber = 2;
    private long endedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EndedAt {
      get { return endedAt_; }
      set {
        endedAt_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private long duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "track_publish_attempts" field.</summary>
    public const int TrackPublishAttemptsFieldNumber = 4;
    private float trackPublishAttempts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrackPublishAttempts {
      get { return trackPublishAttempts_; }
      set {
        trackPublishAttempts_ = value;
      }
    }

    /// <summary>Field number for the "track_publish_success" field.</summary>
    public const int TrackPublishSuccessFieldNumber = 5;
    private float trackPublishSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrackPublishSuccess {
      get { return trackPublishSuccess_; }
      set {
        trackPublishSuccess_ = value;
      }
    }

    /// <summary>Field number for the "track_subscribe_attempts" field.</summary>
    public const int TrackSubscribeAttemptsFieldNumber = 6;
    private float trackSubscribeAttempts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrackSubscribeAttempts {
      get { return trackSubscribeAttempts_; }
      set {
        trackSubscribeAttempts_ = value;
      }
    }

    /// <summary>Field number for the "track_subscribe_success" field.</summary>
    public const int TrackSubscribeSuccessFieldNumber = 7;
    private float trackSubscribeSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrackSubscribeSuccess {
      get { return trackSubscribeSuccess_; }
      set {
        trackSubscribeSuccess_ = value;
      }
    }

    /// <summary>Field number for the "bytes_in" field.</summary>
    public const int BytesInFieldNumber = 8;
    private float bytesIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BytesIn {
      get { return bytesIn_; }
      set {
        bytesIn_ = value;
      }
    }

    /// <summary>Field number for the "bytes_out" field.</summary>
    public const int BytesOutFieldNumber = 9;
    private float bytesOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BytesOut {
      get { return bytesOut_; }
      set {
        bytesOut_ = value;
      }
    }

    /// <summary>Field number for the "packets_in" field.</summary>
    public const int PacketsInFieldNumber = 10;
    private float packetsIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PacketsIn {
      get { return packetsIn_; }
      set {
        packetsIn_ = value;
      }
    }

    /// <summary>Field number for the "packets_out" field.</summary>
    public const int PacketsOutFieldNumber = 11;
    private float packetsOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PacketsOut {
      get { return packetsOut_; }
      set {
        packetsOut_ = value;
      }
    }

    /// <summary>Field number for the "nack_total" field.</summary>
    public const int NackTotalFieldNumber = 12;
    private float nackTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NackTotal {
      get { return nackTotal_; }
      set {
        nackTotal_ = value;
      }
    }

    /// <summary>Field number for the "sys_packets_out" field.</summary>
    public const int SysPacketsOutFieldNumber = 13;
    private float sysPacketsOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SysPacketsOut {
      get { return sysPacketsOut_; }
      set {
        sysPacketsOut_ = value;
      }
    }

    /// <summary>Field number for the "sys_packets_dropped" field.</summary>
    public const int SysPacketsDroppedFieldNumber = 14;
    private float sysPacketsDropped_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SysPacketsDropped {
      get { return sysPacketsDropped_; }
      set {
        sysPacketsDropped_ = value;
      }
    }

    /// <summary>Field number for the "retransmit_bytes_out" field.</summary>
    public const int RetransmitBytesOutFieldNumber = 15;
    private float retransmitBytesOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RetransmitBytesOut {
      get { return retransmitBytesOut_; }
      set {
        retransmitBytesOut_ = value;
      }
    }

    /// <summary>Field number for the "retransmit_packets_out" field.</summary>
    public const int RetransmitPacketsOutFieldNumber = 16;
    private float retransmitPacketsOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RetransmitPacketsOut {
      get { return retransmitPacketsOut_; }
      set {
        retransmitPacketsOut_ = value;
      }
    }

    /// <summary>Field number for the "participant_signal_connected" field.</summary>
    public const int ParticipantSignalConnectedFieldNumber = 17;
    private float participantSignalConnected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParticipantSignalConnected {
      get { return participantSignalConnected_; }
      set {
        participantSignalConnected_ = value;
      }
    }

    /// <summary>Field number for the "participant_rtc_connected" field.</summary>
    public const int ParticipantRtcConnectedFieldNumber = 18;
    private float participantRtcConnected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParticipantRtcConnected {
      get { return participantRtcConnected_; }
      set {
        participantRtcConnected_ = value;
      }
    }

    /// <summary>Field number for the "participant_rtc_init" field.</summary>
    public const int ParticipantRtcInitFieldNumber = 19;
    private float participantRtcInit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ParticipantRtcInit {
      get { return participantRtcInit_; }
      set {
        participantRtcInit_ = value;
      }
    }

    /// <summary>Field number for the "cpu_load" field.</summary>
    public const int CpuLoadFieldNumber = 20;
    private float cpuLoad_;
    /// <summary>
    /// time weighted averages across stats windows forming part of a rate measurement interval
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpuLoad {
      get { return cpuLoad_; }
      set {
        cpuLoad_ = value;
      }
    }

    /// <summary>Field number for the "memory_load" field.</summary>
    public const int MemoryLoadFieldNumber = 21;
    private float memoryLoad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MemoryLoad {
      get { return memoryLoad_; }
      set {
        memoryLoad_ = value;
      }
    }

    /// <summary>Field number for the "memory_used" field.</summary>
    public const int MemoryUsedFieldNumber = 22;
    private float memoryUsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MemoryUsed {
      get { return memoryUsed_; }
      set {
        memoryUsed_ = value;
      }
    }

    /// <summary>Field number for the "memory_total" field.</summary>
    public const int MemoryTotalFieldNumber = 23;
    private float memoryTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MemoryTotal {
      get { return memoryTotal_; }
      set {
        memoryTotal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NodeStatsRate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NodeStatsRate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartedAt != other.StartedAt) return false;
      if (EndedAt != other.EndedAt) return false;
      if (Duration != other.Duration) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackPublishAttempts, other.TrackPublishAttempts)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackPublishSuccess, other.TrackPublishSuccess)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackSubscribeAttempts, other.TrackSubscribeAttempts)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackSubscribeSuccess, other.TrackSubscribeSuccess)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BytesIn, other.BytesIn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BytesOut, other.BytesOut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PacketsIn, other.PacketsIn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PacketsOut, other.PacketsOut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NackTotal, other.NackTotal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SysPacketsOut, other.SysPacketsOut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SysPacketsDropped, other.SysPacketsDropped)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RetransmitBytesOut, other.RetransmitBytesOut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RetransmitPacketsOut, other.RetransmitPacketsOut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParticipantSignalConnected, other.ParticipantSignalConnected)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParticipantRtcConnected, other.ParticipantRtcConnected)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParticipantRtcInit, other.ParticipantRtcInit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpuLoad, other.CpuLoad)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MemoryLoad, other.MemoryLoad)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MemoryUsed, other.MemoryUsed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MemoryTotal, other.MemoryTotal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StartedAt != 0L) hash ^= StartedAt.GetHashCode();
      if (EndedAt != 0L) hash ^= EndedAt.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (TrackPublishAttempts != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackPublishAttempts);
      if (TrackPublishSuccess != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackPublishSuccess);
      if (TrackSubscribeAttempts != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackSubscribeAttempts);
      if (TrackSubscribeSuccess != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackSubscribeSuccess);
      if (BytesIn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BytesIn);
      if (BytesOut != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BytesOut);
      if (PacketsIn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PacketsIn);
      if (PacketsOut != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PacketsOut);
      if (NackTotal != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NackTotal);
      if (SysPacketsOut != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SysPacketsOut);
      if (SysPacketsDropped != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SysPacketsDropped);
      if (RetransmitBytesOut != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RetransmitBytesOut);
      if (RetransmitPacketsOut != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RetransmitPacketsOut);
      if (ParticipantSignalConnected != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParticipantSignalConnected);
      if (ParticipantRtcConnected != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParticipantRtcConnected);
      if (ParticipantRtcInit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParticipantRtcInit);
      if (CpuLoad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpuLoad);
      if (MemoryLoad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MemoryLoad);
      if (MemoryUsed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MemoryUsed);
      if (MemoryTotal != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MemoryTotal);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StartedAt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartedAt);
      }
      if (EndedAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EndedAt);
      }
      if (Duration != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Duration);
      }
      if (TrackPublishAttempts != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TrackPublishAttempts);
      }
      if (TrackPublishSuccess != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(TrackPublishSuccess);
      }
      if (TrackSubscribeAttempts != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(TrackSubscribeAttempts);
      }
      if (TrackSubscribeSuccess != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(TrackSubscribeSuccess);
      }
      if (BytesIn != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(BytesIn);
      }
      if (BytesOut != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(BytesOut);
      }
      if (PacketsIn != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(PacketsIn);
      }
      if (PacketsOut != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(PacketsOut);
      }
      if (NackTotal != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(NackTotal);
      }
      if (SysPacketsOut != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(SysPacketsOut);
      }
      if (SysPacketsDropped != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(SysPacketsDropped);
      }
      if (RetransmitBytesOut != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(RetransmitBytesOut);
      }
      if (RetransmitPacketsOut != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(RetransmitPacketsOut);
      }
      if (ParticipantSignalConnected != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(ParticipantSignalConnected);
      }
      if (ParticipantRtcConnected != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(ParticipantRtcConnected);
      }
      if (ParticipantRtcInit != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(ParticipantRtcInit);
      }
      if (CpuLoad != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(CpuLoad);
      }
      if (MemoryLoad != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(MemoryLoad);
      }
      if (MemoryUsed != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(MemoryUsed);
      }
      if (MemoryTotal != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(MemoryTotal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StartedAt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartedAt);
      }
      if (EndedAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EndedAt);
      }
      if (Duration != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Duration);
      }
      if (TrackPublishAttempts != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TrackPublishAttempts);
      }
      if (TrackPublishSuccess != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(TrackPublishSuccess);
      }
      if (TrackSubscribeAttempts != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(TrackSubscribeAttempts);
      }
      if (TrackSubscribeSuccess != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(TrackSubscribeSuccess);
      }
      if (BytesIn != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(BytesIn);
      }
      if (BytesOut != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(BytesOut);
      }
      if (PacketsIn != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(PacketsIn);
      }
      if (PacketsOut != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(PacketsOut);
      }
      if (NackTotal != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(NackTotal);
      }
      if (SysPacketsOut != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(SysPacketsOut);
      }
      if (SysPacketsDropped != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(SysPacketsDropped);
      }
      if (RetransmitBytesOut != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(RetransmitBytesOut);
      }
      if (RetransmitPacketsOut != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(RetransmitPacketsOut);
      }
      if (ParticipantSignalConnected != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(ParticipantSignalConnected);
      }
      if (ParticipantRtcConnected != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(ParticipantRtcConnected);
      }
      if (ParticipantRtcInit != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(ParticipantRtcInit);
      }
      if (CpuLoad != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(CpuLoad);
      }
      if (MemoryLoad != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(MemoryLoad);
      }
      if (MemoryUsed != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(MemoryUsed);
      }
      if (MemoryTotal != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(MemoryTotal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StartedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartedAt);
      }
      if (EndedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndedAt);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (TrackPublishAttempts != 0F) {
        size += 1 + 4;
      }
      if (TrackPublishSuccess != 0F) {
        size += 1 + 4;
      }
      if (TrackSubscribeAttempts != 0F) {
        size += 1 + 4;
      }
      if (TrackSubscribeSuccess != 0F) {
        size += 1 + 4;
      }
      if (BytesIn != 0F) {
        size += 1 + 4;
      }
      if (BytesOut != 0F) {
        size += 1 + 4;
      }
      if (PacketsIn != 0F) {
        size += 1 + 4;
      }
      if (PacketsOut != 0F) {
        size += 1 + 4;
      }
      if (NackTotal != 0F) {
        size += 1 + 4;
      }
      if (SysPacketsOut != 0F) {
        size += 1 + 4;
      }
      if (SysPacketsDropped != 0F) {
        size += 1 + 4;
      }
      if (RetransmitBytesOut != 0F) {
        size += 1 + 4;
      }
      if (RetransmitPacketsOut != 0F) {
        size += 2 + 4;
      }
      if (ParticipantSignalConnected != 0F) {
        size += 2 + 4;
      }
      if (ParticipantRtcConnected != 0F) {
        size += 2 + 4;
      }
      if (ParticipantRtcInit != 0F) {
        size += 2 + 4;
      }
      if (CpuLoad != 0F) {
        size += 2 + 4;
      }
      if (MemoryLoad != 0F) {
        size += 2 + 4;
      }
      if (MemoryUsed != 0F) {
        size += 2 + 4;
      }
      if (MemoryTotal != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NodeStatsRate other) {
      if (other == null) {
        return;
      }
      if (other.StartedAt != 0L) {
        StartedAt = other.StartedAt;
      }
      if (other.EndedAt != 0L) {
        EndedAt = other.EndedAt;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      if (other.TrackPublishAttempts != 0F) {
        TrackPublishAttempts = other.TrackPublishAttempts;
      }
      if (other.TrackPublishSuccess != 0F) {
        TrackPublishSuccess = other.TrackPublishSuccess;
      }
      if (other.TrackSubscribeAttempts != 0F) {
        TrackSubscribeAttempts = other.TrackSubscribeAttempts;
      }
      if (other.TrackSubscribeSuccess != 0F) {
        TrackSubscribeSuccess = other.TrackSubscribeSuccess;
      }
      if (other.BytesIn != 0F) {
        BytesIn = other.BytesIn;
      }
      if (other.BytesOut != 0F) {
        BytesOut = other.BytesOut;
      }
      if (other.PacketsIn != 0F) {
        PacketsIn = other.PacketsIn;
      }
      if (other.PacketsOut != 0F) {
        PacketsOut = other.PacketsOut;
      }
      if (other.NackTotal != 0F) {
        NackTotal = other.NackTotal;
      }
      if (other.SysPacketsOut != 0F) {
        SysPacketsOut = other.SysPacketsOut;
      }
      if (other.SysPacketsDropped != 0F) {
        SysPacketsDropped = other.SysPacketsDropped;
      }
      if (other.RetransmitBytesOut != 0F) {
        RetransmitBytesOut = other.RetransmitBytesOut;
      }
      if (other.RetransmitPacketsOut != 0F) {
        RetransmitPacketsOut = other.RetransmitPacketsOut;
      }
      if (other.ParticipantSignalConnected != 0F) {
        ParticipantSignalConnected = other.ParticipantSignalConnected;
      }
      if (other.ParticipantRtcConnected != 0F) {
        ParticipantRtcConnected = other.ParticipantRtcConnected;
      }
      if (other.ParticipantRtcInit != 0F) {
        ParticipantRtcInit = other.ParticipantRtcInit;
      }
      if (other.CpuLoad != 0F) {
        CpuLoad = other.CpuLoad;
      }
      if (other.MemoryLoad != 0F) {
        MemoryLoad = other.MemoryLoad;
      }
      if (other.MemoryUsed != 0F) {
        MemoryUsed = other.MemoryUsed;
      }
      if (other.MemoryTotal != 0F) {
        MemoryTotal = other.MemoryTotal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartedAt = input.ReadInt64();
            break;
          }
          case 16: {
            EndedAt = input.ReadInt64();
            break;
          }
          case 24: {
            Duration = input.ReadInt64();
            break;
          }
          case 37: {
            TrackPublishAttempts = input.ReadFloat();
            break;
          }
          case 45: {
            TrackPublishSuccess = input.ReadFloat();
            break;
          }
          case 53: {
            TrackSubscribeAttempts = input.ReadFloat();
            break;
          }
          case 61: {
            TrackSubscribeSuccess = input.ReadFloat();
            break;
          }
          case 69: {
            BytesIn = input.ReadFloat();
            break;
          }
          case 77: {
            BytesOut = input.ReadFloat();
            break;
          }
          case 85: {
            PacketsIn = input.ReadFloat();
            break;
          }
          case 93: {
            PacketsOut = input.ReadFloat();
            break;
          }
          case 101: {
            NackTotal = input.ReadFloat();
            break;
          }
          case 109: {
            SysPacketsOut = input.ReadFloat();
            break;
          }
          case 117: {
            SysPacketsDropped = input.ReadFloat();
            break;
          }
          case 125: {
            RetransmitBytesOut = input.ReadFloat();
            break;
          }
          case 133: {
            RetransmitPacketsOut = input.ReadFloat();
            break;
          }
          case 141: {
            ParticipantSignalConnected = input.ReadFloat();
            break;
          }
          case 149: {
            ParticipantRtcConnected = input.ReadFloat();
            break;
          }
          case 157: {
            ParticipantRtcInit = input.ReadFloat();
            break;
          }
          case 165: {
            CpuLoad = input.ReadFloat();
            break;
          }
          case 173: {
            MemoryLoad = input.ReadFloat();
            break;
          }
          case 181: {
            MemoryUsed = input.ReadFloat();
            break;
          }
          case 189: {
            MemoryTotal = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartedAt = input.ReadInt64();
            break;
          }
          case 16: {
            EndedAt = input.ReadInt64();
            break;
          }
          case 24: {
            Duration = input.ReadInt64();
            break;
          }
          case 37: {
            TrackPublishAttempts = input.ReadFloat();
            break;
          }
          case 45: {
            TrackPublishSuccess = input.ReadFloat();
            break;
          }
          case 53: {
            TrackSubscribeAttempts = input.ReadFloat();
            break;
          }
          case 61: {
            TrackSubscribeSuccess = input.ReadFloat();
            break;
          }
          case 69: {
            BytesIn = input.ReadFloat();
            break;
          }
          case 77: {
            BytesOut = input.ReadFloat();
            break;
          }
          case 85: {
            PacketsIn = input.ReadFloat();
            break;
          }
          case 93: {
            PacketsOut = input.ReadFloat();
            break;
          }
          case 101: {
            NackTotal = input.ReadFloat();
            break;
          }
          case 109: {
            SysPacketsOut = input.ReadFloat();
            break;
          }
          case 117: {
            SysPacketsDropped = input.ReadFloat();
            break;
          }
          case 125: {
            RetransmitBytesOut = input.ReadFloat();
            break;
          }
          case 133: {
            RetransmitPacketsOut = input.ReadFloat();
            break;
          }
          case 141: {
            ParticipantSignalConnected = input.ReadFloat();
            break;
          }
          case 149: {
            ParticipantRtcConnected = input.ReadFloat();
            break;
          }
          case 157: {
            ParticipantRtcInit = input.ReadFloat();
            break;
          }
          case 165: {
            CpuLoad = input.ReadFloat();
            break;
          }
          case 173: {
            MemoryLoad = input.ReadFloat();
            break;
          }
          case 181: {
            MemoryUsed = input.ReadFloat();
            break;
          }
          case 189: {
            MemoryTotal = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class StartSession : pb::IMessage<StartSession>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StartSession> _parser = new pb::MessageParser<StartSession>(() => new StartSession());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StartSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitInternalReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartSession(StartSession other) : this() {
      _hasBits0 = other._hasBits0;
      roomName_ = other.roomName_;
      identity_ = other.identity_;
      connectionId_ = other.connectionId_;
      reconnect_ = other.reconnect_;
      autoSubscribe_ = other.autoSubscribe_;
      hidden_ = other.hidden_;
      client_ = other.client_ != null ? other.client_.Clone() : null;
      recorder_ = other.recorder_;
      name_ = other.name_;
      grantsJson_ = other.grantsJson_;
      adaptiveStream_ = other.adaptiveStream_;
      participantId_ = other.participantId_;
      reconnectReason_ = other.reconnectReason_;
      subscriberAllowPause_ = other.subscriberAllowPause_;
      disableIceLite_ = other.disableIceLite_;
      createRoom_ = other.createRoom_ != null ? other.createRoom_.Clone() : null;
      addTrackRequests_ = other.addTrackRequests_.Clone();
      publisherOffer_ = other.publisherOffer_ != null ? other.publisherOffer_.Clone() : null;
      syncState_ = other.syncState_ != null ? other.syncState_.Clone() : null;
      useSinglePeerConnection_ = other.useSinglePeerConnection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartSession Clone() {
      return new StartSession(this);
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private string roomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 2;
    private string identity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Identity {
      get { return identity_; }
      set {
        identity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connection_id" field.</summary>
    public const int ConnectionIdFieldNumber = 3;
    private string connectionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reconnect" field.</summary>
    public const int ReconnectFieldNumber = 4;
    private bool reconnect_;
    /// <summary>
    /// if a client is reconnecting (i.e. resume instead of restart)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Reconnect {
      get { return reconnect_; }
      set {
        reconnect_ = value;
      }
    }

    /// <summary>Field number for the "auto_subscribe" field.</summary>
    public const int AutoSubscribeFieldNumber = 9;
    private bool autoSubscribe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AutoSubscribe {
      get { return autoSubscribe_; }
      set {
        autoSubscribe_ = value;
      }
    }

    /// <summary>Field number for the "hidden" field.</summary>
    public const int HiddenFieldNumber = 10;
    private bool hidden_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Hidden {
      get { return hidden_; }
      set {
        hidden_ = value;
      }
    }

    /// <summary>Field number for the "client" field.</summary>
    public const int ClientFieldNumber = 11;
    private global::LiveKit.Proto.ClientInfo client_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LiveKit.Proto.ClientInfo Client {
      get { return client_; }
      set {
        client_ = value;
      }
    }

    /// <summary>Field number for the "recorder" field.</summary>
    public const int RecorderFieldNumber = 12;
    private bool recorder_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Recorder {
      get { return recorder_; }
      set {
        recorder_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 13;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grants_json" field.</summary>
    public const int GrantsJsonFieldNumber = 14;
    private string grantsJson_ = "";
    /// <summary>
    /// A user's ClaimGrants serialized in JSON
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GrantsJson {
      get { return grantsJson_; }
      set {
        grantsJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adaptive_stream" field.</summary>
    public const int AdaptiveStreamFieldNumber = 15;
    private bool adaptiveStream_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AdaptiveStream {
      get { return adaptiveStream_; }
      set {
        adaptiveStream_ = value;
      }
    }

    /// <summary>Field number for the "participant_id" field.</summary>
    public const int ParticipantIdFieldNumber = 16;
    private string participantId_ = "";
    /// <summary>
    ///if reconnect, client will set current sid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ParticipantId {
      get { return participantId_; }
      set {
        participantId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reconnect_reason" field.</summary>
    public const int ReconnectReasonFieldNumber = 17;
    private global::LiveKit.Proto.ReconnectReason reconnectReason_ = global::LiveKit.Proto.ReconnectReason.RrUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LiveKit.Proto.ReconnectReason ReconnectReason {
      get { return reconnectReason_; }
      set {
        reconnectReason_ = value;
      }
    }

    /// <summary>Field number for the "subscriber_allow_pause" field.</summary>
    public const int SubscriberAllowPauseFieldNumber = 18;
    private readonly static bool SubscriberAllowPauseDefaultValue = false;

    private bool subscriberAllowPause_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SubscriberAllowPause {
      get { if ((_hasBits0 & 1) != 0) { return subscriberAllowPause_; } else { return SubscriberAllowPauseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        subscriberAllowPause_ = value;
      }
    }
    /// <summary>Gets whether the "subscriber_allow_pause" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSubscriberAllowPause {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "subscriber_allow_pause" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSubscriberAllowPause() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "disable_ice_lite" field.</summary>
    public const int DisableIceLiteFieldNumber = 19;
    private bool disableIceLite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DisableIceLite {
      get { return disableIceLite_; }
      set {
        disableIceLite_ = value;
      }
    }

    /// <summary>Field number for the "create_room" field.</summary>
    public const int CreateRoomFieldNumber = 20;
    private global::LiveKit.Proto.CreateRoomRequest createRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LiveKit.Proto.CreateRoomRequest CreateRoom {
      get { return createRoom_; }
      set {
        createRoom_ = value;
      }
    }

    /// <summary>Field number for the "add_track_requests" field.</summary>
    public const int AddTrackRequestsFieldNumber = 21;
    private static readonly pb::FieldCodec<global::LiveKit.Proto.AddTrackRequest> _repeated_addTrackRequests_codec
        = pb::FieldCodec.ForMessage(170, global::LiveKit.Proto.AddTrackRequest.Parser);
    private readonly pbc::RepeatedField<global::LiveKit.Proto.AddTrackRequest> addTrackRequests_ = new pbc::RepeatedField<global::LiveKit.Proto.AddTrackRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LiveKit.Proto.AddTrackRequest> AddTrackRequests {
      get { return addTrackRequests_; }
    }

    /// <summary>Field number for the "publisher_offer" field.</summary>
    public const int PublisherOfferFieldNumber = 22;
    private global::LiveKit.Proto.SessionDescription publisherOffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LiveKit.Proto.SessionDescription PublisherOffer {
      get { return publisherOffer_; }
      set {
        publisherOffer_ = value;
      }
    }

    /// <summary>Field number for the "sync_state" field.</summary>
    public const int SyncStateFieldNumber = 23;
    private global::LiveKit.Proto.SyncState syncState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LiveKit.Proto.SyncState SyncState {
      get { return syncState_; }
      set {
        syncState_ = value;
      }
    }

    /// <summary>Field number for the "use_single_peer_connection" field.</summary>
    public const int UseSinglePeerConnectionFieldNumber = 24;
    private bool useSinglePeerConnection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseSinglePeerConnection {
      get { return useSinglePeerConnection_; }
      set {
        useSinglePeerConnection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StartSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StartSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (Identity != other.Identity) return false;
      if (ConnectionId != other.ConnectionId) return false;
      if (Reconnect != other.Reconnect) return false;
      if (AutoSubscribe != other.AutoSubscribe) return false;
      if (Hidden != other.Hidden) return false;
      if (!object.Equals(Client, other.Client)) return false;
      if (Recorder != other.Recorder) return false;
      if (Name != other.Name) return false;
      if (GrantsJson != other.GrantsJson) return false;
      if (AdaptiveStream != other.AdaptiveStream) return false;
      if (ParticipantId != other.ParticipantId) return false;
      if (ReconnectReason != other.ReconnectReason) return false;
      if (SubscriberAllowPause != other.SubscriberAllowPause) return false;
      if (DisableIceLite != other.DisableIceLite) return false;
      if (!object.Equals(CreateRoom, other.CreateRoom)) return false;
      if(!addTrackRequests_.Equals(other.addTrackRequests_)) return false;
      if (!object.Equals(PublisherOffer, other.PublisherOffer)) return false;
      if (!object.Equals(SyncState, other.SyncState)) return false;
      if (UseSinglePeerConnection != other.UseSinglePeerConnection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (Identity.Length != 0) hash ^= Identity.GetHashCode();
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (Reconnect != false) hash ^= Reconnect.GetHashCode();
      if (AutoSubscribe != false) hash ^= AutoSubscribe.GetHashCode();
      if (Hidden != false) hash ^= Hidden.GetHashCode();
      if (client_ != null) hash ^= Client.GetHashCode();
      if (Recorder != false) hash ^= Recorder.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (GrantsJson.Length != 0) hash ^= GrantsJson.GetHashCode();
      if (AdaptiveStream != false) hash ^= AdaptiveStream.GetHashCode();
      if (ParticipantId.Length != 0) hash ^= ParticipantId.GetHashCode();
      if (ReconnectReason != global::LiveKit.Proto.ReconnectReason.RrUnknown) hash ^= ReconnectReason.GetHashCode();
      if (HasSubscriberAllowPause) hash ^= SubscriberAllowPause.GetHashCode();
      if (DisableIceLite != false) hash ^= DisableIceLite.GetHashCode();
      if (createRoom_ != null) hash ^= CreateRoom.GetHashCode();
      hash ^= addTrackRequests_.GetHashCode();
      if (publisherOffer_ != null) hash ^= PublisherOffer.GetHashCode();
      if (syncState_ != null) hash ^= SyncState.GetHashCode();
      if (UseSinglePeerConnection != false) hash ^= UseSinglePeerConnection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (Identity.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Identity);
      }
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConnectionId);
      }
      if (Reconnect != false) {
        output.WriteRawTag(32);
        output.WriteBool(Reconnect);
      }
      if (AutoSubscribe != false) {
        output.WriteRawTag(72);
        output.WriteBool(AutoSubscribe);
      }
      if (Hidden != false) {
        output.WriteRawTag(80);
        output.WriteBool(Hidden);
      }
      if (client_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Client);
      }
      if (Recorder != false) {
        output.WriteRawTag(96);
        output.WriteBool(Recorder);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Name);
      }
      if (GrantsJson.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(GrantsJson);
      }
      if (AdaptiveStream != false) {
        output.WriteRawTag(120);
        output.WriteBool(AdaptiveStream);
      }
      if (ParticipantId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ParticipantId);
      }
      if (ReconnectReason != global::LiveKit.Proto.ReconnectReason.RrUnknown) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) ReconnectReason);
      }
      if (HasSubscriberAllowPause) {
        output.WriteRawTag(144, 1);
        output.WriteBool(SubscriberAllowPause);
      }
      if (DisableIceLite != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(DisableIceLite);
      }
      if (createRoom_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(CreateRoom);
      }
      addTrackRequests_.WriteTo(output, _repeated_addTrackRequests_codec);
      if (publisherOffer_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(PublisherOffer);
      }
      if (syncState_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(SyncState);
      }
      if (UseSinglePeerConnection != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(UseSinglePeerConnection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (Identity.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Identity);
      }
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConnectionId);
      }
      if (Reconnect != false) {
        output.WriteRawTag(32);
        output.WriteBool(Reconnect);
      }
      if (AutoSubscribe != false) {
        output.WriteRawTag(72);
        output.WriteBool(AutoSubscribe);
      }
      if (Hidden != false) {
        output.WriteRawTag(80);
        output.WriteBool(Hidden);
      }
      if (client_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Client);
      }
      if (Recorder != false) {
        output.WriteRawTag(96);
        output.WriteBool(Recorder);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Name);
      }
      if (GrantsJson.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(GrantsJson);
      }
      if (AdaptiveStream != false) {
        output.WriteRawTag(120);
        output.WriteBool(AdaptiveStream);
      }
      if (ParticipantId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ParticipantId);
      }
      if (ReconnectReason != global::LiveKit.Proto.ReconnectReason.RrUnknown) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) ReconnectReason);
      }
      if (HasSubscriberAllowPause) {
        output.WriteRawTag(144, 1);
        output.WriteBool(SubscriberAllowPause);
      }
      if (DisableIceLite != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(DisableIceLite);
      }
      if (createRoom_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(CreateRoom);
      }
      addTrackRequests_.WriteTo(ref output, _repeated_addTrackRequests_codec);
      if (publisherOffer_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(PublisherOffer);
      }
      if (syncState_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(SyncState);
      }
      if (UseSinglePeerConnection != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(UseSinglePeerConnection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (Identity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identity);
      }
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (Reconnect != false) {
        size += 1 + 1;
      }
      if (AutoSubscribe != false) {
        size += 1 + 1;
      }
      if (Hidden != false) {
        size += 1 + 1;
      }
      if (client_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Client);
      }
      if (Recorder != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (GrantsJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GrantsJson);
      }
      if (AdaptiveStream != false) {
        size += 1 + 1;
      }
      if (ParticipantId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ParticipantId);
      }
      if (ReconnectReason != global::LiveKit.Proto.ReconnectReason.RrUnknown) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ReconnectReason);
      }
      if (HasSubscriberAllowPause) {
        size += 2 + 1;
      }
      if (DisableIceLite != false) {
        size += 2 + 1;
      }
      if (createRoom_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CreateRoom);
      }
      size += addTrackRequests_.CalculateSize(_repeated_addTrackRequests_codec);
      if (publisherOffer_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PublisherOffer);
      }
      if (syncState_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SyncState);
      }
      if (UseSinglePeerConnection != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StartSession other) {
      if (other == null) {
        return;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.Identity.Length != 0) {
        Identity = other.Identity;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.Reconnect != false) {
        Reconnect = other.Reconnect;
      }
      if (other.AutoSubscribe != false) {
        AutoSubscribe = other.AutoSubscribe;
      }
      if (other.Hidden != false) {
        Hidden = other.Hidden;
      }
      if (other.client_ != null) {
        if (client_ == null) {
          Client = new global::LiveKit.Proto.ClientInfo();
        }
        Client.MergeFrom(other.Client);
      }
      if (other.Recorder != false) {
        Recorder = other.Recorder;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.GrantsJson.Length != 0) {
        GrantsJson = other.GrantsJson;
      }
      if (other.AdaptiveStream != false) {
        AdaptiveStream = other.AdaptiveStream;
      }
      if (other.ParticipantId.Length != 0) {
        ParticipantId = other.ParticipantId;
      }
      if (other.ReconnectReason != global::LiveKit.Proto.ReconnectReason.RrUnknown) {
        ReconnectReason = other.ReconnectReason;
      }
      if (other.HasSubscriberAllowPause) {
        SubscriberAllowPause = other.SubscriberAllowPause;
      }
      if (other.DisableIceLite != false) {
        DisableIceLite = other.DisableIceLite;
      }
      if (other.createRoom_ != null) {
        if (createRoom_ == null) {
          CreateRoom = new global::LiveKit.Proto.CreateRoomRequest();
        }
        CreateRoom.MergeFrom(other.CreateRoom);
      }
      addTrackRequests_.Add(other.addTrackRequests_);
      if (other.publisherOffer_ != null) {
        if (publisherOffer_ == null) {
          PublisherOffer = new global::LiveKit.Proto.SessionDescription();
        }
        PublisherOffer.MergeFrom(other.PublisherOffer);
      }
      if (other.syncState_ != null) {
        if (syncState_ == null) {
          SyncState = new global::LiveKit.Proto.SyncState();
        }
        SyncState.MergeFrom(other.SyncState);
      }
      if (other.UseSinglePeerConnection != false) {
        UseSinglePeerConnection = other.UseSinglePeerConnection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 18: {
            Identity = input.ReadString();
            break;
          }
          case 26: {
            ConnectionId = input.ReadString();
            break;
          }
          case 32: {
            Reconnect = input.ReadBool();
            break;
          }
          case 72: {
            AutoSubscribe = input.ReadBool();
            break;
          }
          case 80: {
            Hidden = input.ReadBool();
            break;
          }
          case 90: {
            if (client_ == null) {
              Client = new global::LiveKit.Proto.ClientInfo();
            }
            input.ReadMessage(Client);
            break;
          }
          case 96: {
            Recorder = input.ReadBool();
            break;
          }
          case 106: {
            Name = input.ReadString();
            break;
          }
          case 114: {
            GrantsJson = input.ReadString();
            break;
          }
          case 120: {
            AdaptiveStream = input.ReadBool();
            break;
          }
          case 130: {
            ParticipantId = input.ReadString();
            break;
          }
          case 136: {
            ReconnectReason = (global::LiveKit.Proto.ReconnectReason) input.ReadEnum();
            break;
          }
          case 144: {
            SubscriberAllowPause = input.ReadBool();
            break;
          }
          case 152: {
            DisableIceLite = input.ReadBool();
            break;
          }
          case 162: {
            if (createRoom_ == null) {
              CreateRoom = new global::LiveKit.Proto.CreateRoomRequest();
            }
            input.ReadMessage(CreateRoom);
            break;
          }
          case 170: {
            addTrackRequests_.AddEntriesFrom(input, _repeated_addTrackRequests_codec);
            break;
          }
          case 178: {
            if (publisherOffer_ == null) {
              PublisherOffer = new global::LiveKit.Proto.SessionDescription();
            }
            input.ReadMessage(PublisherOffer);
            break;
          }
          case 186: {
            if (syncState_ == null) {
              SyncState = new global::LiveKit.Proto.SyncState();
            }
            input.ReadMessage(SyncState);
            break;
          }
          case 192: {
            UseSinglePeerConnection = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 18: {
            Identity = input.ReadString();
            break;
          }
          case 26: {
            ConnectionId = input.ReadString();
            break;
          }
          case 32: {
            Reconnect = input.ReadBool();
            break;
          }
          case 72: {
            AutoSubscribe = input.ReadBool();
            break;
          }
          case 80: {
            Hidden = input.ReadBool();
            break;
          }
          case 90: {
            if (client_ == null) {
              Client = new global::LiveKit.Proto.ClientInfo();
            }
            input.ReadMessage(Client);
            break;
          }
          case 96: {
            Recorder = input.ReadBool();
            break;
          }
          case 106: {
            Name = input.ReadString();
            break;
          }
          case 114: {
            GrantsJson = input.ReadString();
            break;
          }
          case 120: {
            AdaptiveStream = input.ReadBool();
            break;
          }
          case 130: {
            ParticipantId = input.ReadString();
            break;
          }
          case 136: {
            ReconnectReason = (global::LiveKit.Proto.ReconnectReason) input.ReadEnum();
            break;
          }
          case 144: {
            SubscriberAllowPause = input.ReadBool();
            break;
          }
          case 152: {
            DisableIceLite = input.ReadBool();
            break;
          }
          case 162: {
            if (createRoom_ == null) {
              CreateRoom = new global::LiveKit.Proto.CreateRoomRequest();
            }
            input.ReadMessage(CreateRoom);
            break;
          }
          case 170: {
            addTrackRequests_.AddEntriesFrom(ref input, _repeated_addTrackRequests_codec);
            break;
          }
          case 178: {
            if (publisherOffer_ == null) {
              PublisherOffer = new global::LiveKit.Proto.SessionDescription();
            }
            input.ReadMessage(PublisherOffer);
            break;
          }
          case 186: {
            if (syncState_ == null) {
              SyncState = new global::LiveKit.Proto.SyncState();
            }
            input.ReadMessage(SyncState);
            break;
          }
          case 192: {
            UseSinglePeerConnection = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// room info that should not be returned to clients
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RoomInternal : pb::IMessage<RoomInternal>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoomInternal> _parser = new pb::MessageParser<RoomInternal>(() => new RoomInternal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoomInternal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitInternalReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomInternal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomInternal(RoomInternal other) : this() {
      trackEgress_ = other.trackEgress_ != null ? other.trackEgress_.Clone() : null;
      participantEgress_ = other.participantEgress_ != null ? other.participantEgress_.Clone() : null;
      playoutDelay_ = other.playoutDelay_ != null ? other.playoutDelay_.Clone() : null;
      agentDispatches_ = other.agentDispatches_.Clone();
      syncStreams_ = other.syncStreams_;
      replayEnabled_ = other.replayEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomInternal Clone() {
      return new RoomInternal(this);
    }

    /// <summary>Field number for the "track_egress" field.</summary>
    public const int TrackEgressFieldNumber = 1;
    private global::LiveKit.Proto.AutoTrackEgress trackEgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LiveKit.Proto.AutoTrackEgress TrackEgress {
      get { return trackEgress_; }
      set {
        trackEgress_ = value;
      }
    }

    /// <summary>Field number for the "participant_egress" field.</summary>
    public const int ParticipantEgressFieldNumber = 2;
    private global::LiveKit.Proto.AutoParticipantEgress participantEgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LiveKit.Proto.AutoParticipantEgress ParticipantEgress {
      get { return participantEgress_; }
      set {
        participantEgress_ = value;
      }
    }

    /// <summary>Field number for the "playout_delay" field.</summary>
    public const int PlayoutDelayFieldNumber = 3;
    private global::LiveKit.Proto.PlayoutDelay playoutDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LiveKit.Proto.PlayoutDelay PlayoutDelay {
      get { return playoutDelay_; }
      set {
        playoutDelay_ = value;
      }
    }

    /// <summary>Field number for the "agent_dispatches" field.</summary>
    public const int AgentDispatchesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::LiveKit.Proto.RoomAgentDispatch> _repeated_agentDispatches_codec
        = pb::FieldCodec.ForMessage(42, global::LiveKit.Proto.RoomAgentDispatch.Parser);
    private readonly pbc::RepeatedField<global::LiveKit.Proto.RoomAgentDispatch> agentDispatches_ = new pbc::RepeatedField<global::LiveKit.Proto.RoomAgentDispatch>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LiveKit.Proto.RoomAgentDispatch> AgentDispatches {
      get { return agentDispatches_; }
    }

    /// <summary>Field number for the "sync_streams" field.</summary>
    public const int SyncStreamsFieldNumber = 4;
    private bool syncStreams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SyncStreams {
      get { return syncStreams_; }
      set {
        syncStreams_ = value;
      }
    }

    /// <summary>Field number for the "replay_enabled" field.</summary>
    public const int ReplayEnabledFieldNumber = 6;
    private bool replayEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ReplayEnabled {
      get { return replayEnabled_; }
      set {
        replayEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoomInternal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoomInternal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TrackEgress, other.TrackEgress)) return false;
      if (!object.Equals(ParticipantEgress, other.ParticipantEgress)) return false;
      if (!object.Equals(PlayoutDelay, other.PlayoutDelay)) return false;
      if(!agentDispatches_.Equals(other.agentDispatches_)) return false;
      if (SyncStreams != other.SyncStreams) return false;
      if (ReplayEnabled != other.ReplayEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (trackEgress_ != null) hash ^= TrackEgress.GetHashCode();
      if (participantEgress_ != null) hash ^= ParticipantEgress.GetHashCode();
      if (playoutDelay_ != null) hash ^= PlayoutDelay.GetHashCode();
      hash ^= agentDispatches_.GetHashCode();
      if (SyncStreams != false) hash ^= SyncStreams.GetHashCode();
      if (ReplayEnabled != false) hash ^= ReplayEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (trackEgress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TrackEgress);
      }
      if (participantEgress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ParticipantEgress);
      }
      if (playoutDelay_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayoutDelay);
      }
      if (SyncStreams != false) {
        output.WriteRawTag(32);
        output.WriteBool(SyncStreams);
      }
      agentDispatches_.WriteTo(output, _repeated_agentDispatches_codec);
      if (ReplayEnabled != false) {
        output.WriteRawTag(48);
        output.WriteBool(ReplayEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (trackEgress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TrackEgress);
      }
      if (participantEgress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ParticipantEgress);
      }
      if (playoutDelay_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayoutDelay);
      }
      if (SyncStreams != false) {
        output.WriteRawTag(32);
        output.WriteBool(SyncStreams);
      }
      agentDispatches_.WriteTo(ref output, _repeated_agentDispatches_codec);
      if (ReplayEnabled != false) {
        output.WriteRawTag(48);
        output.WriteBool(ReplayEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (trackEgress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrackEgress);
      }
      if (participantEgress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParticipantEgress);
      }
      if (playoutDelay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayoutDelay);
      }
      size += agentDispatches_.CalculateSize(_repeated_agentDispatches_codec);
      if (SyncStreams != false) {
        size += 1 + 1;
      }
      if (ReplayEnabled != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoomInternal other) {
      if (other == null) {
        return;
      }
      if (other.trackEgress_ != null) {
        if (trackEgress_ == null) {
          TrackEgress = new global::LiveKit.Proto.AutoTrackEgress();
        }
        TrackEgress.MergeFrom(other.TrackEgress);
      }
      if (other.participantEgress_ != null) {
        if (participantEgress_ == null) {
          ParticipantEgress = new global::LiveKit.Proto.AutoParticipantEgress();
        }
        ParticipantEgress.MergeFrom(other.ParticipantEgress);
      }
      if (other.playoutDelay_ != null) {
        if (playoutDelay_ == null) {
          PlayoutDelay = new global::LiveKit.Proto.PlayoutDelay();
        }
        PlayoutDelay.MergeFrom(other.PlayoutDelay);
      }
      agentDispatches_.Add(other.agentDispatches_);
      if (other.SyncStreams != false) {
        SyncStreams = other.SyncStreams;
      }
      if (other.ReplayEnabled != false) {
        ReplayEnabled = other.ReplayEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (trackEgress_ == null) {
              TrackEgress = new global::LiveKit.Proto.AutoTrackEgress();
            }
            input.ReadMessage(TrackEgress);
            break;
          }
          case 18: {
            if (participantEgress_ == null) {
              ParticipantEgress = new global::LiveKit.Proto.AutoParticipantEgress();
            }
            input.ReadMessage(ParticipantEgress);
            break;
          }
          case 26: {
            if (playoutDelay_ == null) {
              PlayoutDelay = new global::LiveKit.Proto.PlayoutDelay();
            }
            input.ReadMessage(PlayoutDelay);
            break;
          }
          case 32: {
            SyncStreams = input.ReadBool();
            break;
          }
          case 42: {
            agentDispatches_.AddEntriesFrom(input, _repeated_agentDispatches_codec);
            break;
          }
          case 48: {
            ReplayEnabled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (trackEgress_ == null) {
              TrackEgress = new global::LiveKit.Proto.AutoTrackEgress();
            }
            input.ReadMessage(TrackEgress);
            break;
          }
          case 18: {
            if (participantEgress_ == null) {
              ParticipantEgress = new global::LiveKit.Proto.AutoParticipantEgress();
            }
            input.ReadMessage(ParticipantEgress);
            break;
          }
          case 26: {
            if (playoutDelay_ == null) {
              PlayoutDelay = new global::LiveKit.Proto.PlayoutDelay();
            }
            input.ReadMessage(PlayoutDelay);
            break;
          }
          case 32: {
            SyncStreams = input.ReadBool();
            break;
          }
          case 42: {
            agentDispatches_.AddEntriesFrom(ref input, _repeated_agentDispatches_codec);
            break;
          }
          case 48: {
            ReplayEnabled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ICEConfig : pb::IMessage<ICEConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ICEConfig> _parser = new pb::MessageParser<ICEConfig>(() => new ICEConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ICEConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitInternalReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ICEConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ICEConfig(ICEConfig other) : this() {
      preferenceSubscriber_ = other.preferenceSubscriber_;
      preferencePublisher_ = other.preferencePublisher_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ICEConfig Clone() {
      return new ICEConfig(this);
    }

    /// <summary>Field number for the "preference_subscriber" field.</summary>
    public const int PreferenceSubscriberFieldNumber = 1;
    private global::LiveKit.Proto.ICECandidateType preferenceSubscriber_ = global::LiveKit.Proto.ICECandidateType.IctNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LiveKit.Proto.ICECandidateType PreferenceSubscriber {
      get { return preferenceSubscriber_; }
      set {
        preferenceSubscriber_ = value;
      }
    }

    /// <summary>Field number for the "preference_publisher" field.</summary>
    public const int PreferencePublisherFieldNumber = 2;
    private global::LiveKit.Proto.ICECandidateType preferencePublisher_ = global::LiveKit.Proto.ICECandidateType.IctNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LiveKit.Proto.ICECandidateType PreferencePublisher {
      get { return preferencePublisher_; }
      set {
        preferencePublisher_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ICEConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ICEConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PreferenceSubscriber != other.PreferenceSubscriber) return false;
      if (PreferencePublisher != other.PreferencePublisher) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PreferenceSubscriber != global::LiveKit.Proto.ICECandidateType.IctNone) hash ^= PreferenceSubscriber.GetHashCode();
      if (PreferencePublisher != global::LiveKit.Proto.ICECandidateType.IctNone) hash ^= PreferencePublisher.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PreferenceSubscriber != global::LiveKit.Proto.ICECandidateType.IctNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PreferenceSubscriber);
      }
      if (PreferencePublisher != global::LiveKit.Proto.ICECandidateType.IctNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PreferencePublisher);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PreferenceSubscriber != global::LiveKit.Proto.ICECandidateType.IctNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PreferenceSubscriber);
      }
      if (PreferencePublisher != global::LiveKit.Proto.ICECandidateType.IctNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PreferencePublisher);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PreferenceSubscriber != global::LiveKit.Proto.ICECandidateType.IctNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PreferenceSubscriber);
      }
      if (PreferencePublisher != global::LiveKit.Proto.ICECandidateType.IctNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PreferencePublisher);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ICEConfig other) {
      if (other == null) {
        return;
      }
      if (other.PreferenceSubscriber != global::LiveKit.Proto.ICECandidateType.IctNone) {
        PreferenceSubscriber = other.PreferenceSubscriber;
      }
      if (other.PreferencePublisher != global::LiveKit.Proto.ICECandidateType.IctNone) {
        PreferencePublisher = other.PreferencePublisher;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PreferenceSubscriber = (global::LiveKit.Proto.ICECandidateType) input.ReadEnum();
            break;
          }
          case 16: {
            PreferencePublisher = (global::LiveKit.Proto.ICECandidateType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PreferenceSubscriber = (global::LiveKit.Proto.ICECandidateType) input.ReadEnum();
            break;
          }
          case 16: {
            PreferencePublisher = (global::LiveKit.Proto.ICECandidateType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
